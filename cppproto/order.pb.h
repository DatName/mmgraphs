// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order.proto

#ifndef PROTOBUF_INCLUDED_order_2eproto
#define PROTOBUF_INCLUDED_order_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_order_2eproto 

namespace protobuf_order_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_order_2eproto
namespace models {
class CancelOrder;
class CancelOrderDefaultTypeInternal;
extern CancelOrderDefaultTypeInternal _CancelOrder_default_instance_;
class NewOrder;
class NewOrderDefaultTypeInternal;
extern NewOrderDefaultTypeInternal _NewOrder_default_instance_;
class Order;
class OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
}  // namespace models
namespace google {
namespace protobuf {
template<> ::models::CancelOrder* Arena::CreateMaybeMessage<::models::CancelOrder>(Arena*);
template<> ::models::NewOrder* Arena::CreateMaybeMessage<::models::NewOrder>(Arena*);
template<> ::models::Order* Arena::CreateMaybeMessage<::models::Order>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace models {

enum OrderSide {
  UNKNOWN = 0,
  BID = 1,
  ASK = 2,
  OrderSide_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  OrderSide_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool OrderSide_IsValid(int value);
const OrderSide OrderSide_MIN = UNKNOWN;
const OrderSide OrderSide_MAX = ASK;
const int OrderSide_ARRAYSIZE = OrderSide_MAX + 1;

const ::google::protobuf::EnumDescriptor* OrderSide_descriptor();
inline const ::std::string& OrderSide_Name(OrderSide value) {
  return ::google::protobuf::internal::NameOfEnum(
    OrderSide_descriptor(), value);
}
inline bool OrderSide_Parse(
    const ::std::string& name, OrderSide* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderSide>(
    OrderSide_descriptor(), name, value);
}
// ===================================================================

class NewOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.NewOrder) */ {
 public:
  NewOrder();
  virtual ~NewOrder();

  NewOrder(const NewOrder& from);

  inline NewOrder& operator=(const NewOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewOrder(NewOrder&& from) noexcept
    : NewOrder() {
    *this = ::std::move(from);
  }

  inline NewOrder& operator=(NewOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewOrder* internal_default_instance() {
    return reinterpret_cast<const NewOrder*>(
               &_NewOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NewOrder* other);
  friend void swap(NewOrder& a, NewOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewOrder* New() const final {
    return CreateMaybeMessage<NewOrder>(NULL);
  }

  NewOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NewOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NewOrder& from);
  void MergeFrom(const NewOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string Exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // string Symbol = 6;
  void clear_symbol();
  static const int kSymbolFieldNumber = 6;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string Size = 8;
  void clear_size();
  static const int kSizeFieldNumber = 8;
  const ::std::string& size() const;
  void set_size(const ::std::string& value);
  #if LANG_CXX11
  void set_size(::std::string&& value);
  #endif
  void set_size(const char* value);
  void set_size(const char* value, size_t size);
  ::std::string* mutable_size();
  ::std::string* release_size();
  void set_allocated_size(::std::string* size);

  // string Price = 10;
  void clear_price();
  static const int kPriceFieldNumber = 10;
  const ::std::string& price() const;
  void set_price(const ::std::string& value);
  #if LANG_CXX11
  void set_price(::std::string&& value);
  #endif
  void set_price(const char* value);
  void set_price(const char* value, size_t size);
  ::std::string* mutable_price();
  ::std::string* release_price();
  void set_allocated_price(::std::string* price);

  // int64 Tag = 5;
  void clear_tag();
  static const int kTagFieldNumber = 5;
  ::google::protobuf::int64 tag() const;
  void set_tag(::google::protobuf::int64 value);

  // .models.OrderSide Side = 7;
  void clear_side();
  static const int kSideFieldNumber = 7;
  ::models::OrderSide side() const;
  void set_side(::models::OrderSide value);

  // @@protoc_insertion_point(class_scope:models.NewOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr size_;
  ::google::protobuf::internal::ArenaStringPtr price_;
  ::google::protobuf::int64 tag_;
  int side_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_order_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Order : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.Order) */ {
 public:
  Order();
  virtual ~Order();

  Order(const Order& from);

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(Order&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Order& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Order* other);
  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Order* New() const final {
    return CreateMaybeMessage<Order>(NULL);
  }

  Order* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Order& from);
  void MergeFrom(const Order& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string Account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string Exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // string Client = 4;
  void clear_client();
  static const int kClientFieldNumber = 4;
  const ::std::string& client() const;
  void set_client(const ::std::string& value);
  #if LANG_CXX11
  void set_client(::std::string&& value);
  #endif
  void set_client(const char* value);
  void set_client(const char* value, size_t size);
  ::std::string* mutable_client();
  ::std::string* release_client();
  void set_allocated_client(::std::string* client);

  // string Symbol = 6;
  void clear_symbol();
  static const int kSymbolFieldNumber = 6;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string LimitId = 13;
  void clear_limitid();
  static const int kLimitIdFieldNumber = 13;
  const ::std::string& limitid() const;
  void set_limitid(const ::std::string& value);
  #if LANG_CXX11
  void set_limitid(::std::string&& value);
  #endif
  void set_limitid(const char* value);
  void set_limitid(const char* value, size_t size);
  ::std::string* mutable_limitid();
  ::std::string* release_limitid();
  void set_allocated_limitid(::std::string* limitid);

  // string Status = 16;
  void clear_status();
  static const int kStatusFieldNumber = 16;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // int64 Tag = 5;
  void clear_tag();
  static const int kTagFieldNumber = 5;
  ::google::protobuf::int64 tag() const;
  void set_tag(::google::protobuf::int64 value);

  // double Size = 8;
  void clear_size();
  static const int kSizeFieldNumber = 8;
  double size() const;
  void set_size(double value);

  // double Cost = 9;
  void clear_cost();
  static const int kCostFieldNumber = 9;
  double cost() const;
  void set_cost(double value);

  // double Price = 10;
  void clear_price();
  static const int kPriceFieldNumber = 10;
  double price() const;
  void set_price(double value);

  // double RemainingSize = 11;
  void clear_remainingsize();
  static const int kRemainingSizeFieldNumber = 11;
  double remainingsize() const;
  void set_remainingsize(double value);

  // double Filled = 12;
  void clear_filled();
  static const int kFilledFieldNumber = 12;
  double filled() const;
  void set_filled(double value);

  // int64 CreateDate = 14;
  void clear_createdate();
  static const int kCreateDateFieldNumber = 14;
  ::google::protobuf::int64 createdate() const;
  void set_createdate(::google::protobuf::int64 value);

  // int64 Timestamp = 15;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 15;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // .models.OrderSide Side = 7;
  void clear_side();
  static const int kSideFieldNumber = 7;
  ::models::OrderSide side() const;
  void set_side(::models::OrderSide value);

  // @@protoc_insertion_point(class_scope:models.Order)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr client_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr limitid_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::int64 tag_;
  double size_;
  double cost_;
  double price_;
  double remainingsize_;
  double filled_;
  ::google::protobuf::int64 createdate_;
  ::google::protobuf::int64 timestamp_;
  int side_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_order_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CancelOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.CancelOrder) */ {
 public:
  CancelOrder();
  virtual ~CancelOrder();

  CancelOrder(const CancelOrder& from);

  inline CancelOrder& operator=(const CancelOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelOrder(CancelOrder&& from) noexcept
    : CancelOrder() {
    *this = ::std::move(from);
  }

  inline CancelOrder& operator=(CancelOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOrder* internal_default_instance() {
    return reinterpret_cast<const CancelOrder*>(
               &_CancelOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CancelOrder* other);
  friend void swap(CancelOrder& a, CancelOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelOrder* New() const final {
    return CreateMaybeMessage<CancelOrder>(NULL);
  }

  CancelOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CancelOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CancelOrder& from);
  void MergeFrom(const CancelOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string Exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // int64 Tag = 5;
  void clear_tag();
  static const int kTagFieldNumber = 5;
  ::google::protobuf::int64 tag() const;
  void set_tag(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:models.CancelOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::int64 tag_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_order_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NewOrder

// string Alias = 1;
inline void NewOrder::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewOrder::alias() const {
  // @@protoc_insertion_point(field_get:models.NewOrder.Alias)
  return alias_.GetNoArena();
}
inline void NewOrder::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.NewOrder.Alias)
}
#if LANG_CXX11
inline void NewOrder::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.NewOrder.Alias)
}
#endif
inline void NewOrder::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.NewOrder.Alias)
}
inline void NewOrder::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.NewOrder.Alias)
}
inline ::std::string* NewOrder::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:models.NewOrder.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewOrder::release_alias() {
  // @@protoc_insertion_point(field_release:models.NewOrder.Alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewOrder::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:models.NewOrder.Alias)
}

// string Exchange = 3;
inline void NewOrder::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewOrder::exchange() const {
  // @@protoc_insertion_point(field_get:models.NewOrder.Exchange)
  return exchange_.GetNoArena();
}
inline void NewOrder::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.NewOrder.Exchange)
}
#if LANG_CXX11
inline void NewOrder::set_exchange(::std::string&& value) {
  
  exchange_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.NewOrder.Exchange)
}
#endif
inline void NewOrder::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.NewOrder.Exchange)
}
inline void NewOrder::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.NewOrder.Exchange)
}
inline ::std::string* NewOrder::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:models.NewOrder.Exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewOrder::release_exchange() {
  // @@protoc_insertion_point(field_release:models.NewOrder.Exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewOrder::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:models.NewOrder.Exchange)
}

// int64 Tag = 5;
inline void NewOrder::clear_tag() {
  tag_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 NewOrder::tag() const {
  // @@protoc_insertion_point(field_get:models.NewOrder.Tag)
  return tag_;
}
inline void NewOrder::set_tag(::google::protobuf::int64 value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:models.NewOrder.Tag)
}

// string Symbol = 6;
inline void NewOrder::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewOrder::symbol() const {
  // @@protoc_insertion_point(field_get:models.NewOrder.Symbol)
  return symbol_.GetNoArena();
}
inline void NewOrder::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.NewOrder.Symbol)
}
#if LANG_CXX11
inline void NewOrder::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.NewOrder.Symbol)
}
#endif
inline void NewOrder::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.NewOrder.Symbol)
}
inline void NewOrder::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.NewOrder.Symbol)
}
inline ::std::string* NewOrder::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:models.NewOrder.Symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewOrder::release_symbol() {
  // @@protoc_insertion_point(field_release:models.NewOrder.Symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewOrder::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:models.NewOrder.Symbol)
}

// .models.OrderSide Side = 7;
inline void NewOrder::clear_side() {
  side_ = 0;
}
inline ::models::OrderSide NewOrder::side() const {
  // @@protoc_insertion_point(field_get:models.NewOrder.Side)
  return static_cast< ::models::OrderSide >(side_);
}
inline void NewOrder::set_side(::models::OrderSide value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:models.NewOrder.Side)
}

// string Size = 8;
inline void NewOrder::clear_size() {
  size_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewOrder::size() const {
  // @@protoc_insertion_point(field_get:models.NewOrder.Size)
  return size_.GetNoArena();
}
inline void NewOrder::set_size(const ::std::string& value) {
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.NewOrder.Size)
}
#if LANG_CXX11
inline void NewOrder::set_size(::std::string&& value) {
  
  size_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.NewOrder.Size)
}
#endif
inline void NewOrder::set_size(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.NewOrder.Size)
}
inline void NewOrder::set_size(const char* value, size_t size) {
  
  size_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.NewOrder.Size)
}
inline ::std::string* NewOrder::mutable_size() {
  
  // @@protoc_insertion_point(field_mutable:models.NewOrder.Size)
  return size_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewOrder::release_size() {
  // @@protoc_insertion_point(field_release:models.NewOrder.Size)
  
  return size_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewOrder::set_allocated_size(::std::string* size) {
  if (size != NULL) {
    
  } else {
    
  }
  size_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), size);
  // @@protoc_insertion_point(field_set_allocated:models.NewOrder.Size)
}

// string Price = 10;
inline void NewOrder::clear_price() {
  price_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewOrder::price() const {
  // @@protoc_insertion_point(field_get:models.NewOrder.Price)
  return price_.GetNoArena();
}
inline void NewOrder::set_price(const ::std::string& value) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.NewOrder.Price)
}
#if LANG_CXX11
inline void NewOrder::set_price(::std::string&& value) {
  
  price_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.NewOrder.Price)
}
#endif
inline void NewOrder::set_price(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.NewOrder.Price)
}
inline void NewOrder::set_price(const char* value, size_t size) {
  
  price_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.NewOrder.Price)
}
inline ::std::string* NewOrder::mutable_price() {
  
  // @@protoc_insertion_point(field_mutable:models.NewOrder.Price)
  return price_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewOrder::release_price() {
  // @@protoc_insertion_point(field_release:models.NewOrder.Price)
  
  return price_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewOrder::set_allocated_price(::std::string* price) {
  if (price != NULL) {
    
  } else {
    
  }
  price_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), price);
  // @@protoc_insertion_point(field_set_allocated:models.NewOrder.Price)
}

// -------------------------------------------------------------------

// Order

// string Alias = 1;
inline void Order::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::alias() const {
  // @@protoc_insertion_point(field_get:models.Order.Alias)
  return alias_.GetNoArena();
}
inline void Order::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.Order.Alias)
}
#if LANG_CXX11
inline void Order::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.Order.Alias)
}
#endif
inline void Order::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.Order.Alias)
}
inline void Order::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.Order.Alias)
}
inline ::std::string* Order::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:models.Order.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_alias() {
  // @@protoc_insertion_point(field_release:models.Order.Alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:models.Order.Alias)
}

// string Account = 2;
inline void Order::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::account() const {
  // @@protoc_insertion_point(field_get:models.Order.Account)
  return account_.GetNoArena();
}
inline void Order::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.Order.Account)
}
#if LANG_CXX11
inline void Order::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.Order.Account)
}
#endif
inline void Order::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.Order.Account)
}
inline void Order::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.Order.Account)
}
inline ::std::string* Order::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:models.Order.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_account() {
  // @@protoc_insertion_point(field_release:models.Order.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:models.Order.Account)
}

// string Exchange = 3;
inline void Order::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::exchange() const {
  // @@protoc_insertion_point(field_get:models.Order.Exchange)
  return exchange_.GetNoArena();
}
inline void Order::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.Order.Exchange)
}
#if LANG_CXX11
inline void Order::set_exchange(::std::string&& value) {
  
  exchange_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.Order.Exchange)
}
#endif
inline void Order::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.Order.Exchange)
}
inline void Order::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.Order.Exchange)
}
inline ::std::string* Order::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:models.Order.Exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_exchange() {
  // @@protoc_insertion_point(field_release:models.Order.Exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:models.Order.Exchange)
}

// string Client = 4;
inline void Order::clear_client() {
  client_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::client() const {
  // @@protoc_insertion_point(field_get:models.Order.Client)
  return client_.GetNoArena();
}
inline void Order::set_client(const ::std::string& value) {
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.Order.Client)
}
#if LANG_CXX11
inline void Order::set_client(::std::string&& value) {
  
  client_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.Order.Client)
}
#endif
inline void Order::set_client(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.Order.Client)
}
inline void Order::set_client(const char* value, size_t size) {
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.Order.Client)
}
inline ::std::string* Order::mutable_client() {
  
  // @@protoc_insertion_point(field_mutable:models.Order.Client)
  return client_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_client() {
  // @@protoc_insertion_point(field_release:models.Order.Client)
  
  return client_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_client(::std::string* client) {
  if (client != NULL) {
    
  } else {
    
  }
  client_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client);
  // @@protoc_insertion_point(field_set_allocated:models.Order.Client)
}

// int64 Tag = 5;
inline void Order::clear_tag() {
  tag_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Order::tag() const {
  // @@protoc_insertion_point(field_get:models.Order.Tag)
  return tag_;
}
inline void Order::set_tag(::google::protobuf::int64 value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:models.Order.Tag)
}

// string Symbol = 6;
inline void Order::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::symbol() const {
  // @@protoc_insertion_point(field_get:models.Order.Symbol)
  return symbol_.GetNoArena();
}
inline void Order::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.Order.Symbol)
}
#if LANG_CXX11
inline void Order::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.Order.Symbol)
}
#endif
inline void Order::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.Order.Symbol)
}
inline void Order::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.Order.Symbol)
}
inline ::std::string* Order::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:models.Order.Symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_symbol() {
  // @@protoc_insertion_point(field_release:models.Order.Symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:models.Order.Symbol)
}

// .models.OrderSide Side = 7;
inline void Order::clear_side() {
  side_ = 0;
}
inline ::models::OrderSide Order::side() const {
  // @@protoc_insertion_point(field_get:models.Order.Side)
  return static_cast< ::models::OrderSide >(side_);
}
inline void Order::set_side(::models::OrderSide value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:models.Order.Side)
}

// double Size = 8;
inline void Order::clear_size() {
  size_ = 0;
}
inline double Order::size() const {
  // @@protoc_insertion_point(field_get:models.Order.Size)
  return size_;
}
inline void Order::set_size(double value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:models.Order.Size)
}

// double Price = 10;
inline void Order::clear_price() {
  price_ = 0;
}
inline double Order::price() const {
  // @@protoc_insertion_point(field_get:models.Order.Price)
  return price_;
}
inline void Order::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:models.Order.Price)
}

// double RemainingSize = 11;
inline void Order::clear_remainingsize() {
  remainingsize_ = 0;
}
inline double Order::remainingsize() const {
  // @@protoc_insertion_point(field_get:models.Order.RemainingSize)
  return remainingsize_;
}
inline void Order::set_remainingsize(double value) {
  
  remainingsize_ = value;
  // @@protoc_insertion_point(field_set:models.Order.RemainingSize)
}

// double Filled = 12;
inline void Order::clear_filled() {
  filled_ = 0;
}
inline double Order::filled() const {
  // @@protoc_insertion_point(field_get:models.Order.Filled)
  return filled_;
}
inline void Order::set_filled(double value) {
  
  filled_ = value;
  // @@protoc_insertion_point(field_set:models.Order.Filled)
}

// double Cost = 9;
inline void Order::clear_cost() {
  cost_ = 0;
}
inline double Order::cost() const {
  // @@protoc_insertion_point(field_get:models.Order.Cost)
  return cost_;
}
inline void Order::set_cost(double value) {
  
  cost_ = value;
  // @@protoc_insertion_point(field_set:models.Order.Cost)
}

// string LimitId = 13;
inline void Order::clear_limitid() {
  limitid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::limitid() const {
  // @@protoc_insertion_point(field_get:models.Order.LimitId)
  return limitid_.GetNoArena();
}
inline void Order::set_limitid(const ::std::string& value) {
  
  limitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.Order.LimitId)
}
#if LANG_CXX11
inline void Order::set_limitid(::std::string&& value) {
  
  limitid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.Order.LimitId)
}
#endif
inline void Order::set_limitid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  limitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.Order.LimitId)
}
inline void Order::set_limitid(const char* value, size_t size) {
  
  limitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.Order.LimitId)
}
inline ::std::string* Order::mutable_limitid() {
  
  // @@protoc_insertion_point(field_mutable:models.Order.LimitId)
  return limitid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_limitid() {
  // @@protoc_insertion_point(field_release:models.Order.LimitId)
  
  return limitid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_limitid(::std::string* limitid) {
  if (limitid != NULL) {
    
  } else {
    
  }
  limitid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limitid);
  // @@protoc_insertion_point(field_set_allocated:models.Order.LimitId)
}

// int64 CreateDate = 14;
inline void Order::clear_createdate() {
  createdate_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Order::createdate() const {
  // @@protoc_insertion_point(field_get:models.Order.CreateDate)
  return createdate_;
}
inline void Order::set_createdate(::google::protobuf::int64 value) {
  
  createdate_ = value;
  // @@protoc_insertion_point(field_set:models.Order.CreateDate)
}

// int64 Timestamp = 15;
inline void Order::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Order::timestamp() const {
  // @@protoc_insertion_point(field_get:models.Order.Timestamp)
  return timestamp_;
}
inline void Order::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:models.Order.Timestamp)
}

// string Status = 16;
inline void Order::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Order::status() const {
  // @@protoc_insertion_point(field_get:models.Order.Status)
  return status_.GetNoArena();
}
inline void Order::set_status(const ::std::string& value) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.Order.Status)
}
#if LANG_CXX11
inline void Order::set_status(::std::string&& value) {
  
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.Order.Status)
}
#endif
inline void Order::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.Order.Status)
}
inline void Order::set_status(const char* value, size_t size) {
  
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.Order.Status)
}
inline ::std::string* Order::mutable_status() {
  
  // @@protoc_insertion_point(field_mutable:models.Order.Status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Order::release_status() {
  // @@protoc_insertion_point(field_release:models.Order.Status)
  
  return status_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Order::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    
  } else {
    
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:models.Order.Status)
}

// -------------------------------------------------------------------

// CancelOrder

// string Alias = 1;
inline void CancelOrder::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOrder::alias() const {
  // @@protoc_insertion_point(field_get:models.CancelOrder.Alias)
  return alias_.GetNoArena();
}
inline void CancelOrder::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.CancelOrder.Alias)
}
#if LANG_CXX11
inline void CancelOrder::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.CancelOrder.Alias)
}
#endif
inline void CancelOrder::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.CancelOrder.Alias)
}
inline void CancelOrder::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.CancelOrder.Alias)
}
inline ::std::string* CancelOrder::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:models.CancelOrder.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOrder::release_alias() {
  // @@protoc_insertion_point(field_release:models.CancelOrder.Alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOrder::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:models.CancelOrder.Alias)
}

// string Exchange = 3;
inline void CancelOrder::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOrder::exchange() const {
  // @@protoc_insertion_point(field_get:models.CancelOrder.Exchange)
  return exchange_.GetNoArena();
}
inline void CancelOrder::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.CancelOrder.Exchange)
}
#if LANG_CXX11
inline void CancelOrder::set_exchange(::std::string&& value) {
  
  exchange_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.CancelOrder.Exchange)
}
#endif
inline void CancelOrder::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.CancelOrder.Exchange)
}
inline void CancelOrder::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.CancelOrder.Exchange)
}
inline ::std::string* CancelOrder::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:models.CancelOrder.Exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOrder::release_exchange() {
  // @@protoc_insertion_point(field_release:models.CancelOrder.Exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOrder::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:models.CancelOrder.Exchange)
}

// int64 Tag = 5;
inline void CancelOrder::clear_tag() {
  tag_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CancelOrder::tag() const {
  // @@protoc_insertion_point(field_get:models.CancelOrder.Tag)
  return tag_;
}
inline void CancelOrder::set_tag(::google::protobuf::int64 value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:models.CancelOrder.Tag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace models

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::models::OrderSide> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::models::OrderSide>() {
  return ::models::OrderSide_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_order_2eproto
