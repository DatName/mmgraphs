// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_indicators.proto

#include "messages_indicators.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_messages_5fgeneric_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fgeneric_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MessageHeader;
}  // namespace protobuf_messages_5fgeneric_2eproto
namespace protobuf_messages_5findicators_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5findicators_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BalancesIndicator_Balance_AvailableEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5findicators_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_BalancesIndicator_Balance_TotalEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5findicators_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5findicators_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TradeIndicator_Trade;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5findicators_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_MarketdataIndicator_MarketInd;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5findicators_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_BalancesIndicator_Balance;
}  // namespace protobuf_messages_5findicators_2eproto
namespace protobuf_order_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_order_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Order;
}  // namespace protobuf_order_2eproto
namespace models {
class MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse>
      _instance;
} _MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse_default_instance_;
class MarketdataIndicator_MarketIndDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketdataIndicator_MarketInd>
      _instance;
} _MarketdataIndicator_MarketInd_default_instance_;
class MarketdataIndicatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MarketdataIndicator>
      _instance;
} _MarketdataIndicator_default_instance_;
class TradeIndicator_TradeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeIndicator_Trade>
      _instance;
} _TradeIndicator_Trade_default_instance_;
class TradeIndicatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TradeIndicator>
      _instance;
} _TradeIndicator_default_instance_;
class BalancesIndicator_Balance_TotalEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BalancesIndicator_Balance_TotalEntry_DoNotUse>
      _instance;
} _BalancesIndicator_Balance_TotalEntry_DoNotUse_default_instance_;
class BalancesIndicator_Balance_AvailableEntry_DoNotUseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BalancesIndicator_Balance_AvailableEntry_DoNotUse>
      _instance;
} _BalancesIndicator_Balance_AvailableEntry_DoNotUse_default_instance_;
class BalancesIndicator_BalanceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BalancesIndicator_Balance>
      _instance;
} _BalancesIndicator_Balance_default_instance_;
class BalancesIndicatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BalancesIndicator>
      _instance;
} _BalancesIndicator_default_instance_;
class OpenOrdersIndicatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<OpenOrdersIndicator>
      _instance;
} _OpenOrdersIndicator_default_instance_;
class PlacedOrderIndicatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PlacedOrderIndicator>
      _instance;
} _PlacedOrderIndicator_default_instance_;
class CanceledOrderIndicatorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CanceledOrderIndicator>
      _instance;
} _CanceledOrderIndicator_default_instance_;
}  // namespace models
namespace protobuf_messages_5findicators_2eproto {
static void InitDefaultsMarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse_default_instance_;
    new (ptr) ::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse();
  }
  ::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse}, {}};

static void InitDefaultsMarketdataIndicator_MarketInd() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_MarketdataIndicator_MarketInd_default_instance_;
    new (ptr) ::models::MarketdataIndicator_MarketInd();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::models::MarketdataIndicator_MarketInd::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MarketdataIndicator_MarketInd =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMarketdataIndicator_MarketInd}, {
      &protobuf_messages_5findicators_2eproto::scc_info_MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse.base,}};

static void InitDefaultsMarketdataIndicator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_MarketdataIndicator_default_instance_;
    new (ptr) ::models::MarketdataIndicator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::models::MarketdataIndicator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_MarketdataIndicator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsMarketdataIndicator}, {
      &protobuf_messages_5fgeneric_2eproto::scc_info_MessageHeader.base,
      &protobuf_messages_5findicators_2eproto::scc_info_MarketdataIndicator_MarketInd.base,}};

static void InitDefaultsTradeIndicator_Trade() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_TradeIndicator_Trade_default_instance_;
    new (ptr) ::models::TradeIndicator_Trade();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::models::TradeIndicator_Trade::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TradeIndicator_Trade =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTradeIndicator_Trade}, {}};

static void InitDefaultsTradeIndicator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_TradeIndicator_default_instance_;
    new (ptr) ::models::TradeIndicator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::models::TradeIndicator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TradeIndicator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTradeIndicator}, {
      &protobuf_messages_5fgeneric_2eproto::scc_info_MessageHeader.base,
      &protobuf_messages_5findicators_2eproto::scc_info_TradeIndicator_Trade.base,}};

static void InitDefaultsBalancesIndicator_Balance_TotalEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_BalancesIndicator_Balance_TotalEntry_DoNotUse_default_instance_;
    new (ptr) ::models::BalancesIndicator_Balance_TotalEntry_DoNotUse();
  }
  ::models::BalancesIndicator_Balance_TotalEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BalancesIndicator_Balance_TotalEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBalancesIndicator_Balance_TotalEntry_DoNotUse}, {}};

static void InitDefaultsBalancesIndicator_Balance_AvailableEntry_DoNotUse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_BalancesIndicator_Balance_AvailableEntry_DoNotUse_default_instance_;
    new (ptr) ::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse();
  }
  ::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_BalancesIndicator_Balance_AvailableEntry_DoNotUse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsBalancesIndicator_Balance_AvailableEntry_DoNotUse}, {}};

static void InitDefaultsBalancesIndicator_Balance() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_BalancesIndicator_Balance_default_instance_;
    new (ptr) ::models::BalancesIndicator_Balance();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::models::BalancesIndicator_Balance::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BalancesIndicator_Balance =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBalancesIndicator_Balance}, {
      &protobuf_messages_5findicators_2eproto::scc_info_BalancesIndicator_Balance_TotalEntry_DoNotUse.base,
      &protobuf_messages_5findicators_2eproto::scc_info_BalancesIndicator_Balance_AvailableEntry_DoNotUse.base,}};

static void InitDefaultsBalancesIndicator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_BalancesIndicator_default_instance_;
    new (ptr) ::models::BalancesIndicator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::models::BalancesIndicator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_BalancesIndicator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsBalancesIndicator}, {
      &protobuf_messages_5fgeneric_2eproto::scc_info_MessageHeader.base,
      &protobuf_messages_5findicators_2eproto::scc_info_BalancesIndicator_Balance.base,}};

static void InitDefaultsOpenOrdersIndicator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_OpenOrdersIndicator_default_instance_;
    new (ptr) ::models::OpenOrdersIndicator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::models::OpenOrdersIndicator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_OpenOrdersIndicator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsOpenOrdersIndicator}, {
      &protobuf_messages_5fgeneric_2eproto::scc_info_MessageHeader.base,
      &protobuf_order_2eproto::scc_info_Order.base,}};

static void InitDefaultsPlacedOrderIndicator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_PlacedOrderIndicator_default_instance_;
    new (ptr) ::models::PlacedOrderIndicator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::models::PlacedOrderIndicator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_PlacedOrderIndicator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsPlacedOrderIndicator}, {
      &protobuf_messages_5fgeneric_2eproto::scc_info_MessageHeader.base,
      &protobuf_order_2eproto::scc_info_Order.base,}};

static void InitDefaultsCanceledOrderIndicator() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::models::_CanceledOrderIndicator_default_instance_;
    new (ptr) ::models::CanceledOrderIndicator();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::models::CanceledOrderIndicator::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_CanceledOrderIndicator =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsCanceledOrderIndicator}, {
      &protobuf_messages_5fgeneric_2eproto::scc_info_MessageHeader.base,
      &protobuf_order_2eproto::scc_info_Order.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketdataIndicator_MarketInd.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MarketdataIndicator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradeIndicator_Trade.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TradeIndicator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BalancesIndicator_Balance_TotalEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BalancesIndicator_Balance_AvailableEntry_DoNotUse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BalancesIndicator_Balance.base);
  ::google::protobuf::internal::InitSCC(&scc_info_BalancesIndicator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_OpenOrdersIndicator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PlacedOrderIndicator.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CanceledOrderIndicator.base);
}

::google::protobuf::Metadata file_level_metadata[12];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::MarketdataIndicator_MarketInd, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::MarketdataIndicator_MarketInd, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::MarketdataIndicator_MarketInd, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::MarketdataIndicator_MarketInd, indicators_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::MarketdataIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::MarketdataIndicator, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::MarketdataIndicator, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, client_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, tag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, symbol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, side_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, volume_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, price_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, limitid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator_Trade, timestamp_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::TradeIndicator, body_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance_TotalEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance_TotalEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance_TotalEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance_TotalEntry_DoNotUse, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance, account_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance, exchange_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance, total_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator_Balance, available_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::BalancesIndicator, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::OpenOrdersIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::OpenOrdersIndicator, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::OpenOrdersIndicator, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::PlacedOrderIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::PlacedOrderIndicator, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::PlacedOrderIndicator, body_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::CanceledOrderIndicator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::CanceledOrderIndicator, header_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::models::CanceledOrderIndicator, body_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse)},
  { 9, -1, sizeof(::models::MarketdataIndicator_MarketInd)},
  { 17, -1, sizeof(::models::MarketdataIndicator)},
  { 24, -1, sizeof(::models::TradeIndicator_Trade)},
  { 42, -1, sizeof(::models::TradeIndicator)},
  { 49, 56, sizeof(::models::BalancesIndicator_Balance_TotalEntry_DoNotUse)},
  { 58, 65, sizeof(::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse)},
  { 67, -1, sizeof(::models::BalancesIndicator_Balance)},
  { 77, -1, sizeof(::models::BalancesIndicator)},
  { 84, -1, sizeof(::models::OpenOrdersIndicator)},
  { 91, -1, sizeof(::models::PlacedOrderIndicator)},
  { 98, -1, sizeof(::models::CanceledOrderIndicator)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_MarketdataIndicator_MarketInd_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_MarketdataIndicator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_TradeIndicator_Trade_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_TradeIndicator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_BalancesIndicator_Balance_TotalEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_BalancesIndicator_Balance_AvailableEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_BalancesIndicator_Balance_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_BalancesIndicator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_OpenOrdersIndicator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_PlacedOrderIndicator_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::models::_CanceledOrderIndicator_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "messages_indicators.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031messages_indicators.proto\022\006models\032\026mes"
      "sages_generic.proto\032\013order.proto\"\237\002\n\023Mar"
      "ketdataIndicator\022%\n\006Header\030\001 \001(\0132\025.model"
      "s.MessageHeader\0223\n\004Body\030\002 \003(\0132%.models.M"
      "arketdataIndicator.MarketInd\032\253\001\n\tMarketI"
      "nd\022\016\n\006Symbol\030\001 \001(\t\022\020\n\010Exchange\030\002 \001(\t\022I\n\n"
      "Indicators\030\003 \003(\01325.models.MarketdataIndi"
      "cator.MarketInd.IndicatorsEntry\0321\n\017Indic"
      "atorsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:\002"
      "8\001\"\312\002\n\016TradeIndicator\022%\n\006Header\030\001 \001(\0132\025."
      "models.MessageHeader\022*\n\004Body\030\002 \003(\0132\034.mod"
      "els.TradeIndicator.Trade\032\344\001\n\005Trade\022\r\n\005Al"
      "ias\030\001 \001(\t\022\017\n\007Account\030\002 \001(\t\022\020\n\010Exchange\030\003"
      " \001(\t\022\016\n\006Client\030\004 \001(\t\022\013\n\003Tag\030\005 \001(\003\022\016\n\006Sym"
      "bol\030\006 \001(\t\022\037\n\004Side\030\007 \001(\0162\021.models.OrderSi"
      "de\022\014\n\004Size\030\010 \001(\001\022\016\n\006Volume\030\t \001(\001\022\r\n\005Pric"
      "e\030\n \001(\001\022\n\n\002Id\030\013 \001(\t\022\017\n\007LimitId\030\014 \001(\t\022\021\n\t"
      "Timestamp\030\r \001(\003\"\213\003\n\021BalancesIndicator\022%\n"
      "\006Header\030\001 \001(\0132\025.models.MessageHeader\022/\n\004"
      "Body\030\002 \003(\0132!.models.BalancesIndicator.Ba"
      "lance\032\235\002\n\007Balance\022\r\n\005Alias\030\001 \001(\t\022\017\n\007Acco"
      "unt\030\002 \001(\t\022\020\n\010Exchange\030\003 \001(\t\022;\n\005Total\030\004 \003"
      "(\0132,.models.BalancesIndicator.Balance.To"
      "talEntry\022C\n\tAvailable\030\005 \003(\01320.models.Bal"
      "ancesIndicator.Balance.AvailableEntry\032,\n"
      "\nTotalEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\001:"
      "\0028\001\0320\n\016AvailableEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005va"
      "lue\030\002 \001(\001:\0028\001\"Y\n\023OpenOrdersIndicator\022%\n\006"
      "Header\030\001 \001(\0132\025.models.MessageHeader\022\033\n\004B"
      "ody\030\002 \003(\0132\r.models.Order\"Z\n\024PlacedOrderI"
      "ndicator\022%\n\006Header\030\001 \001(\0132\025.models.Messag"
      "eHeader\022\033\n\004Body\030\002 \001(\0132\r.models.Order\"\\\n\026"
      "CanceledOrderIndicator\022%\n\006Header\030\001 \001(\0132\025"
      ".models.MessageHeader\022\033\n\004Body\030\002 \001(\0132\r.mo"
      "dels.Orderb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1378);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages_indicators.proto", &protobuf_RegisterTypes);
  ::protobuf_messages_5fgeneric_2eproto::AddDescriptors();
  ::protobuf_order_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messages_5findicators_2eproto
namespace models {

// ===================================================================

MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse() {}
MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse::MergeFrom(const MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse::GetMetadata() const {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[0];
}
void MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void MarketdataIndicator_MarketInd::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketdataIndicator_MarketInd::kSymbolFieldNumber;
const int MarketdataIndicator_MarketInd::kExchangeFieldNumber;
const int MarketdataIndicator_MarketInd::kIndicatorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketdataIndicator_MarketInd::MarketdataIndicator_MarketInd()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5findicators_2eproto::scc_info_MarketdataIndicator_MarketInd.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:models.MarketdataIndicator.MarketInd)
}
MarketdataIndicator_MarketInd::MarketdataIndicator_MarketInd(const MarketdataIndicator_MarketInd& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  indicators_.MergeFrom(from.indicators_);
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  // @@protoc_insertion_point(copy_constructor:models.MarketdataIndicator.MarketInd)
}

void MarketdataIndicator_MarketInd::SharedCtor() {
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MarketdataIndicator_MarketInd::~MarketdataIndicator_MarketInd() {
  // @@protoc_insertion_point(destructor:models.MarketdataIndicator.MarketInd)
  SharedDtor();
}

void MarketdataIndicator_MarketInd::SharedDtor() {
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MarketdataIndicator_MarketInd::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketdataIndicator_MarketInd::descriptor() {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketdataIndicator_MarketInd& MarketdataIndicator_MarketInd::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5findicators_2eproto::scc_info_MarketdataIndicator_MarketInd.base);
  return *internal_default_instance();
}


void MarketdataIndicator_MarketInd::Clear() {
// @@protoc_insertion_point(message_clear_start:models.MarketdataIndicator.MarketInd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indicators_.Clear();
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool MarketdataIndicator_MarketInd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:models.MarketdataIndicator.MarketInd)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Symbol = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.MarketdataIndicator.MarketInd.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.MarketdataIndicator.MarketInd.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> Indicators = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&indicators_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.MarketdataIndicator.MarketInd.IndicatorsEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:models.MarketdataIndicator.MarketInd)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:models.MarketdataIndicator.MarketInd)
  return false;
#undef DO_
}

void MarketdataIndicator_MarketInd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:models.MarketdataIndicator.MarketInd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.MarketdataIndicator.MarketInd.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.MarketdataIndicator.MarketInd.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->exchange(), output);
  }

  // map<string, double> Indicators = 3;
  if (!this->indicators().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "models.MarketdataIndicator.MarketInd.IndicatorsEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->indicators().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->indicators().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->indicators().begin();
          it != this->indicators().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(indicators_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->indicators().begin();
          it != this->indicators().end(); ++it) {
        entry.reset(indicators_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:models.MarketdataIndicator.MarketInd)
}

::google::protobuf::uint8* MarketdataIndicator_MarketInd::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:models.MarketdataIndicator.MarketInd)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.MarketdataIndicator.MarketInd.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.MarketdataIndicator.MarketInd.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->exchange(), target);
  }

  // map<string, double> Indicators = 3;
  if (!this->indicators().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "models.MarketdataIndicator.MarketInd.IndicatorsEntry.key");
      }
    };

    if (deterministic &&
        this->indicators().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->indicators().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->indicators().begin();
          it != this->indicators().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(indicators_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->indicators().begin();
          it != this->indicators().end(); ++it) {
        entry.reset(indicators_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       3, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:models.MarketdataIndicator.MarketInd)
  return target;
}

size_t MarketdataIndicator_MarketInd::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:models.MarketdataIndicator.MarketInd)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, double> Indicators = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->indicators_size());
  {
    ::std::unique_ptr<MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->indicators().begin();
        it != this->indicators().end(); ++it) {
      entry.reset(indicators_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string Symbol = 1;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Exchange = 2;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketdataIndicator_MarketInd::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:models.MarketdataIndicator.MarketInd)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketdataIndicator_MarketInd* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketdataIndicator_MarketInd>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:models.MarketdataIndicator.MarketInd)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:models.MarketdataIndicator.MarketInd)
    MergeFrom(*source);
  }
}

void MarketdataIndicator_MarketInd::MergeFrom(const MarketdataIndicator_MarketInd& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:models.MarketdataIndicator.MarketInd)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  indicators_.MergeFrom(from.indicators_);
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
}

void MarketdataIndicator_MarketInd::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:models.MarketdataIndicator.MarketInd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketdataIndicator_MarketInd::CopyFrom(const MarketdataIndicator_MarketInd& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:models.MarketdataIndicator.MarketInd)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketdataIndicator_MarketInd::IsInitialized() const {
  return true;
}

void MarketdataIndicator_MarketInd::Swap(MarketdataIndicator_MarketInd* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketdataIndicator_MarketInd::InternalSwap(MarketdataIndicator_MarketInd* other) {
  using std::swap;
  indicators_.Swap(&other->indicators_);
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketdataIndicator_MarketInd::GetMetadata() const {
  protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MarketdataIndicator::InitAsDefaultInstance() {
  ::models::_MarketdataIndicator_default_instance_._instance.get_mutable()->header_ = const_cast< ::models::MessageHeader*>(
      ::models::MessageHeader::internal_default_instance());
}
void MarketdataIndicator::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketdataIndicator::kHeaderFieldNumber;
const int MarketdataIndicator::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketdataIndicator::MarketdataIndicator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5findicators_2eproto::scc_info_MarketdataIndicator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:models.MarketdataIndicator)
}
MarketdataIndicator::MarketdataIndicator(const MarketdataIndicator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      body_(from.body_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::models::MessageHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:models.MarketdataIndicator)
}

void MarketdataIndicator::SharedCtor() {
  header_ = NULL;
}

MarketdataIndicator::~MarketdataIndicator() {
  // @@protoc_insertion_point(destructor:models.MarketdataIndicator)
  SharedDtor();
}

void MarketdataIndicator::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void MarketdataIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MarketdataIndicator::descriptor() {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MarketdataIndicator& MarketdataIndicator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5findicators_2eproto::scc_info_MarketdataIndicator.base);
  return *internal_default_instance();
}


void MarketdataIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:models.MarketdataIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool MarketdataIndicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:models.MarketdataIndicator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .models.MessageHeader Header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .models.MarketdataIndicator.MarketInd Body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:models.MarketdataIndicator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:models.MarketdataIndicator)
  return false;
#undef DO_
}

void MarketdataIndicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:models.MarketdataIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .models.MarketdataIndicator.MarketInd Body = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->body(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:models.MarketdataIndicator)
}

::google::protobuf::uint8* MarketdataIndicator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:models.MarketdataIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .models.MarketdataIndicator.MarketInd Body = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->body(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:models.MarketdataIndicator)
  return target;
}

size_t MarketdataIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:models.MarketdataIndicator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .models.MarketdataIndicator.MarketInd Body = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->body_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->body(static_cast<int>(i)));
    }
  }

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MarketdataIndicator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:models.MarketdataIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const MarketdataIndicator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MarketdataIndicator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:models.MarketdataIndicator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:models.MarketdataIndicator)
    MergeFrom(*source);
  }
}

void MarketdataIndicator::MergeFrom(const MarketdataIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:models.MarketdataIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_.MergeFrom(from.body_);
  if (from.has_header()) {
    mutable_header()->::models::MessageHeader::MergeFrom(from.header());
  }
}

void MarketdataIndicator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:models.MarketdataIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketdataIndicator::CopyFrom(const MarketdataIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:models.MarketdataIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketdataIndicator::IsInitialized() const {
  return true;
}

void MarketdataIndicator::Swap(MarketdataIndicator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketdataIndicator::InternalSwap(MarketdataIndicator* other) {
  using std::swap;
  CastToBase(&body_)->InternalSwap(CastToBase(&other->body_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MarketdataIndicator::GetMetadata() const {
  protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeIndicator_Trade::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeIndicator_Trade::kAliasFieldNumber;
const int TradeIndicator_Trade::kAccountFieldNumber;
const int TradeIndicator_Trade::kExchangeFieldNumber;
const int TradeIndicator_Trade::kClientFieldNumber;
const int TradeIndicator_Trade::kTagFieldNumber;
const int TradeIndicator_Trade::kSymbolFieldNumber;
const int TradeIndicator_Trade::kSideFieldNumber;
const int TradeIndicator_Trade::kSizeFieldNumber;
const int TradeIndicator_Trade::kVolumeFieldNumber;
const int TradeIndicator_Trade::kPriceFieldNumber;
const int TradeIndicator_Trade::kIdFieldNumber;
const int TradeIndicator_Trade::kLimitIdFieldNumber;
const int TradeIndicator_Trade::kTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeIndicator_Trade::TradeIndicator_Trade()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5findicators_2eproto::scc_info_TradeIndicator_Trade.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:models.TradeIndicator.Trade)
}
TradeIndicator_Trade::TradeIndicator_Trade(const TradeIndicator_Trade& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  client_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.client().size() > 0) {
    client_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_);
  }
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.symbol().size() > 0) {
    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.id().size() > 0) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  limitid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.limitid().size() > 0) {
    limitid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limitid_);
  }
  ::memcpy(&tag_, &from.tag_,
    static_cast<size_t>(reinterpret_cast<char*>(&side_) -
    reinterpret_cast<char*>(&tag_)) + sizeof(side_));
  // @@protoc_insertion_point(copy_constructor:models.TradeIndicator.Trade)
}

void TradeIndicator_Trade::SharedCtor() {
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limitid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(side_));
}

TradeIndicator_Trade::~TradeIndicator_Trade() {
  // @@protoc_insertion_point(destructor:models.TradeIndicator.Trade)
  SharedDtor();
}

void TradeIndicator_Trade::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limitid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TradeIndicator_Trade::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradeIndicator_Trade::descriptor() {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeIndicator_Trade& TradeIndicator_Trade::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5findicators_2eproto::scc_info_TradeIndicator_Trade.base);
  return *internal_default_instance();
}


void TradeIndicator_Trade::Clear() {
// @@protoc_insertion_point(message_clear_start:models.TradeIndicator.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  limitid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&tag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&side_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(side_));
  _internal_metadata_.Clear();
}

bool TradeIndicator_Trade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:models.TradeIndicator.Trade)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Alias = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), static_cast<int>(this->alias().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.TradeIndicator.Trade.Alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.TradeIndicator.Trade.Account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.TradeIndicator.Trade.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Client = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client().data(), static_cast<int>(this->client().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.TradeIndicator.Trade.Client"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Tag = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Symbol = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->symbol().data(), static_cast<int>(this->symbol().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.TradeIndicator.Trade.Symbol"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .models.OrderSide Side = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_side(static_cast< ::models::OrderSide >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Size = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u /* 65 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Volume = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u /* 73 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &volume_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double Price = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u /* 81 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Id = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.TradeIndicator.Trade.Id"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string LimitId = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_limitid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->limitid().data(), static_cast<int>(this->limitid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.TradeIndicator.Trade.LimitId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 Timestamp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u /* 104 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:models.TradeIndicator.Trade)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:models.TradeIndicator.Trade)
  return false;
#undef DO_
}

void TradeIndicator_Trade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:models.TradeIndicator.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alias(), output);
  }

  // string Account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // string Client = 4;
  if (this->client().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client().data(), static_cast<int>(this->client().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Client");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->client(), output);
  }

  // int64 Tag = 5;
  if (this->tag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->tag(), output);
  }

  // string Symbol = 6;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->symbol(), output);
  }

  // .models.OrderSide Side = 7;
  if (this->side() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->side(), output);
  }

  // double Size = 8;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->size(), output);
  }

  // double Volume = 9;
  if (this->volume() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->volume(), output);
  }

  // double Price = 10;
  if (this->price() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->price(), output);
  }

  // string Id = 11;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->id(), output);
  }

  // string LimitId = 12;
  if (this->limitid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->limitid().data(), static_cast<int>(this->limitid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.LimitId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->limitid(), output);
  }

  // int64 Timestamp = 13;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(13, this->timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:models.TradeIndicator.Trade)
}

::google::protobuf::uint8* TradeIndicator_Trade::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:models.TradeIndicator.Trade)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alias(), target);
  }

  // string Account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // string Client = 4;
  if (this->client().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client().data(), static_cast<int>(this->client().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Client");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->client(), target);
  }

  // int64 Tag = 5;
  if (this->tag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->tag(), target);
  }

  // string Symbol = 6;
  if (this->symbol().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->symbol().data(), static_cast<int>(this->symbol().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->symbol(), target);
  }

  // .models.OrderSide Side = 7;
  if (this->side() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->side(), target);
  }

  // double Size = 8;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->size(), target);
  }

  // double Volume = 9;
  if (this->volume() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->volume(), target);
  }

  // double Price = 10;
  if (this->price() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->price(), target);
  }

  // string Id = 11;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.Id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->id(), target);
  }

  // string LimitId = 12;
  if (this->limitid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->limitid().data(), static_cast<int>(this->limitid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.TradeIndicator.Trade.LimitId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->limitid(), target);
  }

  // int64 Timestamp = 13;
  if (this->timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:models.TradeIndicator.Trade)
  return target;
}

size_t TradeIndicator_Trade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:models.TradeIndicator.Trade)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string Alias = 1;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // string Account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  // string Client = 4;
  if (this->client().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client());
  }

  // string Symbol = 6;
  if (this->symbol().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->symbol());
  }

  // string Id = 11;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // string LimitId = 12;
  if (this->limitid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->limitid());
  }

  // int64 Tag = 5;
  if (this->tag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->tag());
  }

  // double Size = 8;
  if (this->size() != 0) {
    total_size += 1 + 8;
  }

  // double Volume = 9;
  if (this->volume() != 0) {
    total_size += 1 + 8;
  }

  // double Price = 10;
  if (this->price() != 0) {
    total_size += 1 + 8;
  }

  // int64 Timestamp = 13;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->timestamp());
  }

  // .models.OrderSide Side = 7;
  if (this->side() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->side());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeIndicator_Trade::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:models.TradeIndicator.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeIndicator_Trade* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeIndicator_Trade>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:models.TradeIndicator.Trade)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:models.TradeIndicator.Trade)
    MergeFrom(*source);
  }
}

void TradeIndicator_Trade::MergeFrom(const TradeIndicator_Trade& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:models.TradeIndicator.Trade)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  if (from.client().size() > 0) {

    client_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_);
  }
  if (from.symbol().size() > 0) {

    symbol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.symbol_);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.limitid().size() > 0) {

    limitid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.limitid_);
  }
  if (from.tag() != 0) {
    set_tag(from.tag());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.volume() != 0) {
    set_volume(from.volume());
  }
  if (from.price() != 0) {
    set_price(from.price());
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.side() != 0) {
    set_side(from.side());
  }
}

void TradeIndicator_Trade::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:models.TradeIndicator.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeIndicator_Trade::CopyFrom(const TradeIndicator_Trade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:models.TradeIndicator.Trade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeIndicator_Trade::IsInitialized() const {
  return true;
}

void TradeIndicator_Trade::Swap(TradeIndicator_Trade* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeIndicator_Trade::InternalSwap(TradeIndicator_Trade* other) {
  using std::swap;
  alias_.Swap(&other->alias_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_.Swap(&other->client_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  symbol_.Swap(&other->symbol_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  limitid_.Swap(&other->limitid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tag_, other->tag_);
  swap(size_, other->size_);
  swap(volume_, other->volume_);
  swap(price_, other->price_);
  swap(timestamp_, other->timestamp_);
  swap(side_, other->side_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradeIndicator_Trade::GetMetadata() const {
  protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TradeIndicator::InitAsDefaultInstance() {
  ::models::_TradeIndicator_default_instance_._instance.get_mutable()->header_ = const_cast< ::models::MessageHeader*>(
      ::models::MessageHeader::internal_default_instance());
}
void TradeIndicator::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TradeIndicator::kHeaderFieldNumber;
const int TradeIndicator::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TradeIndicator::TradeIndicator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5findicators_2eproto::scc_info_TradeIndicator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:models.TradeIndicator)
}
TradeIndicator::TradeIndicator(const TradeIndicator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      body_(from.body_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::models::MessageHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:models.TradeIndicator)
}

void TradeIndicator::SharedCtor() {
  header_ = NULL;
}

TradeIndicator::~TradeIndicator() {
  // @@protoc_insertion_point(destructor:models.TradeIndicator)
  SharedDtor();
}

void TradeIndicator::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void TradeIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TradeIndicator::descriptor() {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TradeIndicator& TradeIndicator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5findicators_2eproto::scc_info_TradeIndicator.base);
  return *internal_default_instance();
}


void TradeIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:models.TradeIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool TradeIndicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:models.TradeIndicator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .models.MessageHeader Header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .models.TradeIndicator.Trade Body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:models.TradeIndicator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:models.TradeIndicator)
  return false;
#undef DO_
}

void TradeIndicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:models.TradeIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .models.TradeIndicator.Trade Body = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->body(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:models.TradeIndicator)
}

::google::protobuf::uint8* TradeIndicator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:models.TradeIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .models.TradeIndicator.Trade Body = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->body(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:models.TradeIndicator)
  return target;
}

size_t TradeIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:models.TradeIndicator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .models.TradeIndicator.Trade Body = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->body_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->body(static_cast<int>(i)));
    }
  }

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TradeIndicator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:models.TradeIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const TradeIndicator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TradeIndicator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:models.TradeIndicator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:models.TradeIndicator)
    MergeFrom(*source);
  }
}

void TradeIndicator::MergeFrom(const TradeIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:models.TradeIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_.MergeFrom(from.body_);
  if (from.has_header()) {
    mutable_header()->::models::MessageHeader::MergeFrom(from.header());
  }
}

void TradeIndicator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:models.TradeIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TradeIndicator::CopyFrom(const TradeIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:models.TradeIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TradeIndicator::IsInitialized() const {
  return true;
}

void TradeIndicator::Swap(TradeIndicator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TradeIndicator::InternalSwap(TradeIndicator* other) {
  using std::swap;
  CastToBase(&body_)->InternalSwap(CastToBase(&other->body_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TradeIndicator::GetMetadata() const {
  protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

BalancesIndicator_Balance_TotalEntry_DoNotUse::BalancesIndicator_Balance_TotalEntry_DoNotUse() {}
BalancesIndicator_Balance_TotalEntry_DoNotUse::BalancesIndicator_Balance_TotalEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void BalancesIndicator_Balance_TotalEntry_DoNotUse::MergeFrom(const BalancesIndicator_Balance_TotalEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata BalancesIndicator_Balance_TotalEntry_DoNotUse::GetMetadata() const {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[5];
}
void BalancesIndicator_Balance_TotalEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

BalancesIndicator_Balance_AvailableEntry_DoNotUse::BalancesIndicator_Balance_AvailableEntry_DoNotUse() {}
BalancesIndicator_Balance_AvailableEntry_DoNotUse::BalancesIndicator_Balance_AvailableEntry_DoNotUse(::google::protobuf::Arena* arena) : SuperType(arena) {}
void BalancesIndicator_Balance_AvailableEntry_DoNotUse::MergeFrom(const BalancesIndicator_Balance_AvailableEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::google::protobuf::Metadata BalancesIndicator_Balance_AvailableEntry_DoNotUse::GetMetadata() const {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[6];
}
void BalancesIndicator_Balance_AvailableEntry_DoNotUse::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}


// ===================================================================

void BalancesIndicator_Balance::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BalancesIndicator_Balance::kAliasFieldNumber;
const int BalancesIndicator_Balance::kAccountFieldNumber;
const int BalancesIndicator_Balance::kExchangeFieldNumber;
const int BalancesIndicator_Balance::kTotalFieldNumber;
const int BalancesIndicator_Balance::kAvailableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BalancesIndicator_Balance::BalancesIndicator_Balance()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5findicators_2eproto::scc_info_BalancesIndicator_Balance.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:models.BalancesIndicator.Balance)
}
BalancesIndicator_Balance::BalancesIndicator_Balance(const BalancesIndicator_Balance& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  total_.MergeFrom(from.total_);
  available_.MergeFrom(from.available_);
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.alias().size() > 0) {
    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.account().size() > 0) {
    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.exchange().size() > 0) {
    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
  // @@protoc_insertion_point(copy_constructor:models.BalancesIndicator.Balance)
}

void BalancesIndicator_Balance::SharedCtor() {
  alias_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BalancesIndicator_Balance::~BalancesIndicator_Balance() {
  // @@protoc_insertion_point(destructor:models.BalancesIndicator.Balance)
  SharedDtor();
}

void BalancesIndicator_Balance::SharedDtor() {
  alias_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BalancesIndicator_Balance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BalancesIndicator_Balance::descriptor() {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BalancesIndicator_Balance& BalancesIndicator_Balance::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5findicators_2eproto::scc_info_BalancesIndicator_Balance.base);
  return *internal_default_instance();
}


void BalancesIndicator_Balance::Clear() {
// @@protoc_insertion_point(message_clear_start:models.BalancesIndicator.Balance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  total_.Clear();
  available_.Clear();
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool BalancesIndicator_Balance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:models.BalancesIndicator.Balance)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string Alias = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alias()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->alias().data(), static_cast<int>(this->alias().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.BalancesIndicator.Balance.Alias"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Account = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->account().data(), static_cast<int>(this->account().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.BalancesIndicator.Balance.Account"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string Exchange = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_exchange()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->exchange().data(), static_cast<int>(this->exchange().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.BalancesIndicator.Balance.Exchange"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> Total = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          BalancesIndicator_Balance_TotalEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              BalancesIndicator_Balance_TotalEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&total_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.BalancesIndicator.Balance.TotalEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, double> Available = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          BalancesIndicator_Balance_AvailableEntry_DoNotUse::Parser< ::google::protobuf::internal::MapField<
              BalancesIndicator_Balance_AvailableEntry_DoNotUse,
              ::std::string, double,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
              0 >,
            ::google::protobuf::Map< ::std::string, double > > parser(&available_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "models.BalancesIndicator.Balance.AvailableEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:models.BalancesIndicator.Balance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:models.BalancesIndicator.Balance)
  return false;
#undef DO_
}

void BalancesIndicator_Balance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:models.BalancesIndicator.Balance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.BalancesIndicator.Balance.Alias");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->alias(), output);
  }

  // string Account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.BalancesIndicator.Balance.Account");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->account(), output);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.BalancesIndicator.Balance.Exchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->exchange(), output);
  }

  // map<string, double> Total = 4;
  if (!this->total().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "models.BalancesIndicator.Balance.TotalEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->total().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->total().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->total().begin();
          it != this->total().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<BalancesIndicator_Balance_TotalEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(total_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<BalancesIndicator_Balance_TotalEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->total().begin();
          it != this->total().end(); ++it) {
        entry.reset(total_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            4, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> Available = 5;
  if (!this->available().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "models.BalancesIndicator.Balance.AvailableEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->available().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->available().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->available().begin();
          it != this->available().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<BalancesIndicator_Balance_AvailableEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(available_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<BalancesIndicator_Balance_AvailableEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->available().begin();
          it != this->available().end(); ++it) {
        entry.reset(available_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            5, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:models.BalancesIndicator.Balance)
}

::google::protobuf::uint8* BalancesIndicator_Balance::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:models.BalancesIndicator.Balance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string Alias = 1;
  if (this->alias().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->alias().data(), static_cast<int>(this->alias().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.BalancesIndicator.Balance.Alias");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->alias(), target);
  }

  // string Account = 2;
  if (this->account().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->account().data(), static_cast<int>(this->account().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.BalancesIndicator.Balance.Account");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->exchange().data(), static_cast<int>(this->exchange().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "models.BalancesIndicator.Balance.Exchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->exchange(), target);
  }

  // map<string, double> Total = 4;
  if (!this->total().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "models.BalancesIndicator.Balance.TotalEntry.key");
      }
    };

    if (deterministic &&
        this->total().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->total().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->total().begin();
          it != this->total().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<BalancesIndicator_Balance_TotalEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(total_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<BalancesIndicator_Balance_TotalEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->total().begin();
          it != this->total().end(); ++it) {
        entry.reset(total_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       4, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, double> Available = 5;
  if (!this->available().empty()) {
    typedef ::google::protobuf::Map< ::std::string, double >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "models.BalancesIndicator.Balance.AvailableEntry.key");
      }
    };

    if (deterministic &&
        this->available().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->available().size()]);
      typedef ::google::protobuf::Map< ::std::string, double >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->available().begin();
          it != this->available().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::std::unique_ptr<BalancesIndicator_Balance_AvailableEntry_DoNotUse> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(available_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::std::unique_ptr<BalancesIndicator_Balance_AvailableEntry_DoNotUse> entry;
      for (::google::protobuf::Map< ::std::string, double >::const_iterator
          it = this->available().begin();
          it != this->available().end(); ++it) {
        entry.reset(available_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       5, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:models.BalancesIndicator.Balance)
  return target;
}

size_t BalancesIndicator_Balance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:models.BalancesIndicator.Balance)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, double> Total = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->total_size());
  {
    ::std::unique_ptr<BalancesIndicator_Balance_TotalEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->total().begin();
        it != this->total().end(); ++it) {
      entry.reset(total_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, double> Available = 5;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->available_size());
  {
    ::std::unique_ptr<BalancesIndicator_Balance_AvailableEntry_DoNotUse> entry;
    for (::google::protobuf::Map< ::std::string, double >::const_iterator
        it = this->available().begin();
        it != this->available().end(); ++it) {
      entry.reset(available_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string Alias = 1;
  if (this->alias().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->alias());
  }

  // string Account = 2;
  if (this->account().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->account());
  }

  // string Exchange = 3;
  if (this->exchange().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->exchange());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BalancesIndicator_Balance::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:models.BalancesIndicator.Balance)
  GOOGLE_DCHECK_NE(&from, this);
  const BalancesIndicator_Balance* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BalancesIndicator_Balance>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:models.BalancesIndicator.Balance)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:models.BalancesIndicator.Balance)
    MergeFrom(*source);
  }
}

void BalancesIndicator_Balance::MergeFrom(const BalancesIndicator_Balance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:models.BalancesIndicator.Balance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  total_.MergeFrom(from.total_);
  available_.MergeFrom(from.available_);
  if (from.alias().size() > 0) {

    alias_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.alias_);
  }
  if (from.account().size() > 0) {

    account_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.account_);
  }
  if (from.exchange().size() > 0) {

    exchange_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.exchange_);
  }
}

void BalancesIndicator_Balance::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:models.BalancesIndicator.Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalancesIndicator_Balance::CopyFrom(const BalancesIndicator_Balance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:models.BalancesIndicator.Balance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalancesIndicator_Balance::IsInitialized() const {
  return true;
}

void BalancesIndicator_Balance::Swap(BalancesIndicator_Balance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BalancesIndicator_Balance::InternalSwap(BalancesIndicator_Balance* other) {
  using std::swap;
  total_.Swap(&other->total_);
  available_.Swap(&other->available_);
  alias_.Swap(&other->alias_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  account_.Swap(&other->account_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  exchange_.Swap(&other->exchange_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BalancesIndicator_Balance::GetMetadata() const {
  protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void BalancesIndicator::InitAsDefaultInstance() {
  ::models::_BalancesIndicator_default_instance_._instance.get_mutable()->header_ = const_cast< ::models::MessageHeader*>(
      ::models::MessageHeader::internal_default_instance());
}
void BalancesIndicator::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BalancesIndicator::kHeaderFieldNumber;
const int BalancesIndicator::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BalancesIndicator::BalancesIndicator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5findicators_2eproto::scc_info_BalancesIndicator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:models.BalancesIndicator)
}
BalancesIndicator::BalancesIndicator(const BalancesIndicator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      body_(from.body_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::models::MessageHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:models.BalancesIndicator)
}

void BalancesIndicator::SharedCtor() {
  header_ = NULL;
}

BalancesIndicator::~BalancesIndicator() {
  // @@protoc_insertion_point(destructor:models.BalancesIndicator)
  SharedDtor();
}

void BalancesIndicator::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void BalancesIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* BalancesIndicator::descriptor() {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BalancesIndicator& BalancesIndicator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5findicators_2eproto::scc_info_BalancesIndicator.base);
  return *internal_default_instance();
}


void BalancesIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:models.BalancesIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool BalancesIndicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:models.BalancesIndicator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .models.MessageHeader Header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .models.BalancesIndicator.Balance Body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:models.BalancesIndicator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:models.BalancesIndicator)
  return false;
#undef DO_
}

void BalancesIndicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:models.BalancesIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .models.BalancesIndicator.Balance Body = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->body(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:models.BalancesIndicator)
}

::google::protobuf::uint8* BalancesIndicator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:models.BalancesIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .models.BalancesIndicator.Balance Body = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->body(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:models.BalancesIndicator)
  return target;
}

size_t BalancesIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:models.BalancesIndicator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .models.BalancesIndicator.Balance Body = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->body_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->body(static_cast<int>(i)));
    }
  }

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BalancesIndicator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:models.BalancesIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const BalancesIndicator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BalancesIndicator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:models.BalancesIndicator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:models.BalancesIndicator)
    MergeFrom(*source);
  }
}

void BalancesIndicator::MergeFrom(const BalancesIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:models.BalancesIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_.MergeFrom(from.body_);
  if (from.has_header()) {
    mutable_header()->::models::MessageHeader::MergeFrom(from.header());
  }
}

void BalancesIndicator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:models.BalancesIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BalancesIndicator::CopyFrom(const BalancesIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:models.BalancesIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BalancesIndicator::IsInitialized() const {
  return true;
}

void BalancesIndicator::Swap(BalancesIndicator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BalancesIndicator::InternalSwap(BalancesIndicator* other) {
  using std::swap;
  CastToBase(&body_)->InternalSwap(CastToBase(&other->body_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata BalancesIndicator::GetMetadata() const {
  protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void OpenOrdersIndicator::InitAsDefaultInstance() {
  ::models::_OpenOrdersIndicator_default_instance_._instance.get_mutable()->header_ = const_cast< ::models::MessageHeader*>(
      ::models::MessageHeader::internal_default_instance());
}
void OpenOrdersIndicator::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void OpenOrdersIndicator::clear_body() {
  body_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OpenOrdersIndicator::kHeaderFieldNumber;
const int OpenOrdersIndicator::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OpenOrdersIndicator::OpenOrdersIndicator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5findicators_2eproto::scc_info_OpenOrdersIndicator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:models.OpenOrdersIndicator)
}
OpenOrdersIndicator::OpenOrdersIndicator(const OpenOrdersIndicator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      body_(from.body_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::models::MessageHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:models.OpenOrdersIndicator)
}

void OpenOrdersIndicator::SharedCtor() {
  header_ = NULL;
}

OpenOrdersIndicator::~OpenOrdersIndicator() {
  // @@protoc_insertion_point(destructor:models.OpenOrdersIndicator)
  SharedDtor();
}

void OpenOrdersIndicator::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
}

void OpenOrdersIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* OpenOrdersIndicator::descriptor() {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OpenOrdersIndicator& OpenOrdersIndicator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5findicators_2eproto::scc_info_OpenOrdersIndicator.base);
  return *internal_default_instance();
}


void OpenOrdersIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:models.OpenOrdersIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  body_.Clear();
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  _internal_metadata_.Clear();
}

bool OpenOrdersIndicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:models.OpenOrdersIndicator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .models.MessageHeader Header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .models.Order Body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:models.OpenOrdersIndicator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:models.OpenOrdersIndicator)
  return false;
#undef DO_
}

void OpenOrdersIndicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:models.OpenOrdersIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // repeated .models.Order Body = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->body(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:models.OpenOrdersIndicator)
}

::google::protobuf::uint8* OpenOrdersIndicator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:models.OpenOrdersIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // repeated .models.Order Body = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->body_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->body(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:models.OpenOrdersIndicator)
  return target;
}

size_t OpenOrdersIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:models.OpenOrdersIndicator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .models.Order Body = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->body_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->body(static_cast<int>(i)));
    }
  }

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OpenOrdersIndicator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:models.OpenOrdersIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const OpenOrdersIndicator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OpenOrdersIndicator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:models.OpenOrdersIndicator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:models.OpenOrdersIndicator)
    MergeFrom(*source);
  }
}

void OpenOrdersIndicator::MergeFrom(const OpenOrdersIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:models.OpenOrdersIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  body_.MergeFrom(from.body_);
  if (from.has_header()) {
    mutable_header()->::models::MessageHeader::MergeFrom(from.header());
  }
}

void OpenOrdersIndicator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:models.OpenOrdersIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenOrdersIndicator::CopyFrom(const OpenOrdersIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:models.OpenOrdersIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenOrdersIndicator::IsInitialized() const {
  return true;
}

void OpenOrdersIndicator::Swap(OpenOrdersIndicator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OpenOrdersIndicator::InternalSwap(OpenOrdersIndicator* other) {
  using std::swap;
  CastToBase(&body_)->InternalSwap(CastToBase(&other->body_));
  swap(header_, other->header_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata OpenOrdersIndicator::GetMetadata() const {
  protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PlacedOrderIndicator::InitAsDefaultInstance() {
  ::models::_PlacedOrderIndicator_default_instance_._instance.get_mutable()->header_ = const_cast< ::models::MessageHeader*>(
      ::models::MessageHeader::internal_default_instance());
  ::models::_PlacedOrderIndicator_default_instance_._instance.get_mutable()->body_ = const_cast< ::models::Order*>(
      ::models::Order::internal_default_instance());
}
void PlacedOrderIndicator::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void PlacedOrderIndicator::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PlacedOrderIndicator::kHeaderFieldNumber;
const int PlacedOrderIndicator::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PlacedOrderIndicator::PlacedOrderIndicator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5findicators_2eproto::scc_info_PlacedOrderIndicator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:models.PlacedOrderIndicator)
}
PlacedOrderIndicator::PlacedOrderIndicator(const PlacedOrderIndicator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::models::MessageHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_body()) {
    body_ = new ::models::Order(*from.body_);
  } else {
    body_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:models.PlacedOrderIndicator)
}

void PlacedOrderIndicator::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&body_) -
      reinterpret_cast<char*>(&header_)) + sizeof(body_));
}

PlacedOrderIndicator::~PlacedOrderIndicator() {
  // @@protoc_insertion_point(destructor:models.PlacedOrderIndicator)
  SharedDtor();
}

void PlacedOrderIndicator::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete body_;
}

void PlacedOrderIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PlacedOrderIndicator::descriptor() {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PlacedOrderIndicator& PlacedOrderIndicator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5findicators_2eproto::scc_info_PlacedOrderIndicator.base);
  return *internal_default_instance();
}


void PlacedOrderIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:models.PlacedOrderIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
  _internal_metadata_.Clear();
}

bool PlacedOrderIndicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:models.PlacedOrderIndicator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .models.MessageHeader Header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .models.Order Body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:models.PlacedOrderIndicator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:models.PlacedOrderIndicator)
  return false;
#undef DO_
}

void PlacedOrderIndicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:models.PlacedOrderIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .models.Order Body = 2;
  if (this->has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:models.PlacedOrderIndicator)
}

::google::protobuf::uint8* PlacedOrderIndicator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:models.PlacedOrderIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .models.Order Body = 2;
  if (this->has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_body(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:models.PlacedOrderIndicator)
  return target;
}

size_t PlacedOrderIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:models.PlacedOrderIndicator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .models.Order Body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlacedOrderIndicator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:models.PlacedOrderIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const PlacedOrderIndicator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PlacedOrderIndicator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:models.PlacedOrderIndicator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:models.PlacedOrderIndicator)
    MergeFrom(*source);
  }
}

void PlacedOrderIndicator::MergeFrom(const PlacedOrderIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:models.PlacedOrderIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::models::MessageHeader::MergeFrom(from.header());
  }
  if (from.has_body()) {
    mutable_body()->::models::Order::MergeFrom(from.body());
  }
}

void PlacedOrderIndicator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:models.PlacedOrderIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlacedOrderIndicator::CopyFrom(const PlacedOrderIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:models.PlacedOrderIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlacedOrderIndicator::IsInitialized() const {
  return true;
}

void PlacedOrderIndicator::Swap(PlacedOrderIndicator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PlacedOrderIndicator::InternalSwap(PlacedOrderIndicator* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(body_, other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PlacedOrderIndicator::GetMetadata() const {
  protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CanceledOrderIndicator::InitAsDefaultInstance() {
  ::models::_CanceledOrderIndicator_default_instance_._instance.get_mutable()->header_ = const_cast< ::models::MessageHeader*>(
      ::models::MessageHeader::internal_default_instance());
  ::models::_CanceledOrderIndicator_default_instance_._instance.get_mutable()->body_ = const_cast< ::models::Order*>(
      ::models::Order::internal_default_instance());
}
void CanceledOrderIndicator::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
void CanceledOrderIndicator::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CanceledOrderIndicator::kHeaderFieldNumber;
const int CanceledOrderIndicator::kBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CanceledOrderIndicator::CanceledOrderIndicator()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_5findicators_2eproto::scc_info_CanceledOrderIndicator.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:models.CanceledOrderIndicator)
}
CanceledOrderIndicator::CanceledOrderIndicator(const CanceledOrderIndicator& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::models::MessageHeader(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_body()) {
    body_ = new ::models::Order(*from.body_);
  } else {
    body_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:models.CanceledOrderIndicator)
}

void CanceledOrderIndicator::SharedCtor() {
  ::memset(&header_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&body_) -
      reinterpret_cast<char*>(&header_)) + sizeof(body_));
}

CanceledOrderIndicator::~CanceledOrderIndicator() {
  // @@protoc_insertion_point(destructor:models.CanceledOrderIndicator)
  SharedDtor();
}

void CanceledOrderIndicator::SharedDtor() {
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete body_;
}

void CanceledOrderIndicator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CanceledOrderIndicator::descriptor() {
  ::protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CanceledOrderIndicator& CanceledOrderIndicator::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_5findicators_2eproto::scc_info_CanceledOrderIndicator.base);
  return *internal_default_instance();
}


void CanceledOrderIndicator::Clear() {
// @@protoc_insertion_point(message_clear_start:models.CanceledOrderIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
  _internal_metadata_.Clear();
}

bool CanceledOrderIndicator::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:models.CanceledOrderIndicator)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .models.MessageHeader Header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .models.Order Body = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_body()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:models.CanceledOrderIndicator)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:models.CanceledOrderIndicator)
  return false;
#undef DO_
}

void CanceledOrderIndicator::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:models.CanceledOrderIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_header(), output);
  }

  // .models.Order Body = 2;
  if (this->has_body()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_body(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:models.CanceledOrderIndicator)
}

::google::protobuf::uint8* CanceledOrderIndicator::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:models.CanceledOrderIndicator)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_header(), deterministic, target);
  }

  // .models.Order Body = 2;
  if (this->has_body()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_body(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:models.CanceledOrderIndicator)
  return target;
}

size_t CanceledOrderIndicator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:models.CanceledOrderIndicator)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .models.MessageHeader Header = 1;
  if (this->has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .models.Order Body = 2;
  if (this->has_body()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *body_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CanceledOrderIndicator::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:models.CanceledOrderIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  const CanceledOrderIndicator* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CanceledOrderIndicator>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:models.CanceledOrderIndicator)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:models.CanceledOrderIndicator)
    MergeFrom(*source);
  }
}

void CanceledOrderIndicator::MergeFrom(const CanceledOrderIndicator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:models.CanceledOrderIndicator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_header()) {
    mutable_header()->::models::MessageHeader::MergeFrom(from.header());
  }
  if (from.has_body()) {
    mutable_body()->::models::Order::MergeFrom(from.body());
  }
}

void CanceledOrderIndicator::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:models.CanceledOrderIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CanceledOrderIndicator::CopyFrom(const CanceledOrderIndicator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:models.CanceledOrderIndicator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanceledOrderIndicator::IsInitialized() const {
  return true;
}

void CanceledOrderIndicator::Swap(CanceledOrderIndicator* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CanceledOrderIndicator::InternalSwap(CanceledOrderIndicator* other) {
  using std::swap;
  swap(header_, other->header_);
  swap(body_, other->body_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CanceledOrderIndicator::GetMetadata() const {
  protobuf_messages_5findicators_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_5findicators_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace models
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse* Arena::CreateMaybeMessage< ::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::MarketdataIndicator_MarketInd* Arena::CreateMaybeMessage< ::models::MarketdataIndicator_MarketInd >(Arena* arena) {
  return Arena::CreateInternal< ::models::MarketdataIndicator_MarketInd >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::MarketdataIndicator* Arena::CreateMaybeMessage< ::models::MarketdataIndicator >(Arena* arena) {
  return Arena::CreateInternal< ::models::MarketdataIndicator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::TradeIndicator_Trade* Arena::CreateMaybeMessage< ::models::TradeIndicator_Trade >(Arena* arena) {
  return Arena::CreateInternal< ::models::TradeIndicator_Trade >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::TradeIndicator* Arena::CreateMaybeMessage< ::models::TradeIndicator >(Arena* arena) {
  return Arena::CreateInternal< ::models::TradeIndicator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::BalancesIndicator_Balance_TotalEntry_DoNotUse* Arena::CreateMaybeMessage< ::models::BalancesIndicator_Balance_TotalEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::models::BalancesIndicator_Balance_TotalEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse* Arena::CreateMaybeMessage< ::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateInternal< ::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::BalancesIndicator_Balance* Arena::CreateMaybeMessage< ::models::BalancesIndicator_Balance >(Arena* arena) {
  return Arena::CreateInternal< ::models::BalancesIndicator_Balance >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::BalancesIndicator* Arena::CreateMaybeMessage< ::models::BalancesIndicator >(Arena* arena) {
  return Arena::CreateInternal< ::models::BalancesIndicator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::OpenOrdersIndicator* Arena::CreateMaybeMessage< ::models::OpenOrdersIndicator >(Arena* arena) {
  return Arena::CreateInternal< ::models::OpenOrdersIndicator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::PlacedOrderIndicator* Arena::CreateMaybeMessage< ::models::PlacedOrderIndicator >(Arena* arena) {
  return Arena::CreateInternal< ::models::PlacedOrderIndicator >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::models::CanceledOrderIndicator* Arena::CreateMaybeMessage< ::models::CanceledOrderIndicator >(Arena* arena) {
  return Arena::CreateInternal< ::models::CanceledOrderIndicator >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
