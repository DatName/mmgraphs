// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_robot.proto

#ifndef PROTOBUF_INCLUDED_messages_5frobot_2eproto
#define PROTOBUF_INCLUDED_messages_5frobot_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "messages_generic.pb.h"
#include "order.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5frobot_2eproto 

namespace protobuf_messages_5frobot_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[9];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_messages_5frobot_2eproto
namespace models {
class AccountBody;
class AccountBodyDefaultTypeInternal;
extern AccountBodyDefaultTypeInternal _AccountBody_default_instance_;
class PullBalances;
class PullBalancesDefaultTypeInternal;
extern PullBalancesDefaultTypeInternal _PullBalances_default_instance_;
class PullMarkets;
class PullMarketsDefaultTypeInternal;
extern PullMarketsDefaultTypeInternal _PullMarkets_default_instance_;
class PullMarkets_MessageBody;
class PullMarkets_MessageBodyDefaultTypeInternal;
extern PullMarkets_MessageBodyDefaultTypeInternal _PullMarkets_MessageBody_default_instance_;
class PullOrders;
class PullOrdersDefaultTypeInternal;
extern PullOrdersDefaultTypeInternal _PullOrders_default_instance_;
class PushCancel;
class PushCancelDefaultTypeInternal;
extern PushCancelDefaultTypeInternal _PushCancel_default_instance_;
class PushCancelAll;
class PushCancelAllDefaultTypeInternal;
extern PushCancelAllDefaultTypeInternal _PushCancelAll_default_instance_;
class PushLogin;
class PushLoginDefaultTypeInternal;
extern PushLoginDefaultTypeInternal _PushLogin_default_instance_;
class PushOrder;
class PushOrderDefaultTypeInternal;
extern PushOrderDefaultTypeInternal _PushOrder_default_instance_;
}  // namespace models
namespace google {
namespace protobuf {
template<> ::models::AccountBody* Arena::CreateMaybeMessage<::models::AccountBody>(Arena*);
template<> ::models::PullBalances* Arena::CreateMaybeMessage<::models::PullBalances>(Arena*);
template<> ::models::PullMarkets* Arena::CreateMaybeMessage<::models::PullMarkets>(Arena*);
template<> ::models::PullMarkets_MessageBody* Arena::CreateMaybeMessage<::models::PullMarkets_MessageBody>(Arena*);
template<> ::models::PullOrders* Arena::CreateMaybeMessage<::models::PullOrders>(Arena*);
template<> ::models::PushCancel* Arena::CreateMaybeMessage<::models::PushCancel>(Arena*);
template<> ::models::PushCancelAll* Arena::CreateMaybeMessage<::models::PushCancelAll>(Arena*);
template<> ::models::PushLogin* Arena::CreateMaybeMessage<::models::PushLogin>(Arena*);
template<> ::models::PushOrder* Arena::CreateMaybeMessage<::models::PushOrder>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace models {

// ===================================================================

class AccountBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.AccountBody) */ {
 public:
  AccountBody();
  virtual ~AccountBody();

  AccountBody(const AccountBody& from);

  inline AccountBody& operator=(const AccountBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AccountBody(AccountBody&& from) noexcept
    : AccountBody() {
    *this = ::std::move(from);
  }

  inline AccountBody& operator=(AccountBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AccountBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AccountBody* internal_default_instance() {
    return reinterpret_cast<const AccountBody*>(
               &_AccountBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(AccountBody* other);
  friend void swap(AccountBody& a, AccountBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AccountBody* New() const final {
    return CreateMaybeMessage<AccountBody>(NULL);
  }

  AccountBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AccountBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AccountBody& from);
  void MergeFrom(const AccountBody& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccountBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string Exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // @@protoc_insertion_point(class_scope:models.AccountBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushLogin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.PushLogin) */ {
 public:
  PushLogin();
  virtual ~PushLogin();

  PushLogin(const PushLogin& from);

  inline PushLogin& operator=(const PushLogin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushLogin(PushLogin&& from) noexcept
    : PushLogin() {
    *this = ::std::move(from);
  }

  inline PushLogin& operator=(PushLogin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushLogin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushLogin* internal_default_instance() {
    return reinterpret_cast<const PushLogin*>(
               &_PushLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PushLogin* other);
  friend void swap(PushLogin& a, PushLogin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushLogin* New() const final {
    return CreateMaybeMessage<PushLogin>(NULL);
  }

  PushLogin* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PushLogin>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PushLogin& from);
  void MergeFrom(const PushLogin& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushLogin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // .models.AccountBody Body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::models::AccountBody& _internal_body() const;
  public:
  const ::models::AccountBody& body() const;
  ::models::AccountBody* release_body();
  ::models::AccountBody* mutable_body();
  void set_allocated_body(::models::AccountBody* body);

  // @@protoc_insertion_point(class_scope:models.PushLogin)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::models::MessageHeader* header_;
  ::models::AccountBody* body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.PushOrder) */ {
 public:
  PushOrder();
  virtual ~PushOrder();

  PushOrder(const PushOrder& from);

  inline PushOrder& operator=(const PushOrder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushOrder(PushOrder&& from) noexcept
    : PushOrder() {
    *this = ::std::move(from);
  }

  inline PushOrder& operator=(PushOrder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushOrder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushOrder* internal_default_instance() {
    return reinterpret_cast<const PushOrder*>(
               &_PushOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PushOrder* other);
  friend void swap(PushOrder& a, PushOrder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushOrder* New() const final {
    return CreateMaybeMessage<PushOrder>(NULL);
  }

  PushOrder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PushOrder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PushOrder& from);
  void MergeFrom(const PushOrder& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // .models.NewOrder Body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::models::NewOrder& _internal_body() const;
  public:
  const ::models::NewOrder& body() const;
  ::models::NewOrder* release_body();
  ::models::NewOrder* mutable_body();
  void set_allocated_body(::models::NewOrder* body);

  // @@protoc_insertion_point(class_scope:models.PushOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::models::MessageHeader* header_;
  ::models::NewOrder* body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushCancel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.PushCancel) */ {
 public:
  PushCancel();
  virtual ~PushCancel();

  PushCancel(const PushCancel& from);

  inline PushCancel& operator=(const PushCancel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushCancel(PushCancel&& from) noexcept
    : PushCancel() {
    *this = ::std::move(from);
  }

  inline PushCancel& operator=(PushCancel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushCancel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushCancel* internal_default_instance() {
    return reinterpret_cast<const PushCancel*>(
               &_PushCancel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PushCancel* other);
  friend void swap(PushCancel& a, PushCancel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushCancel* New() const final {
    return CreateMaybeMessage<PushCancel>(NULL);
  }

  PushCancel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PushCancel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PushCancel& from);
  void MergeFrom(const PushCancel& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushCancel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // .models.CancelOrder Body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::models::CancelOrder& _internal_body() const;
  public:
  const ::models::CancelOrder& body() const;
  ::models::CancelOrder* release_body();
  ::models::CancelOrder* mutable_body();
  void set_allocated_body(::models::CancelOrder* body);

  // @@protoc_insertion_point(class_scope:models.PushCancel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::models::MessageHeader* header_;
  ::models::CancelOrder* body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PushCancelAll : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.PushCancelAll) */ {
 public:
  PushCancelAll();
  virtual ~PushCancelAll();

  PushCancelAll(const PushCancelAll& from);

  inline PushCancelAll& operator=(const PushCancelAll& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PushCancelAll(PushCancelAll&& from) noexcept
    : PushCancelAll() {
    *this = ::std::move(from);
  }

  inline PushCancelAll& operator=(PushCancelAll&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PushCancelAll& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PushCancelAll* internal_default_instance() {
    return reinterpret_cast<const PushCancelAll*>(
               &_PushCancelAll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PushCancelAll* other);
  friend void swap(PushCancelAll& a, PushCancelAll& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PushCancelAll* New() const final {
    return CreateMaybeMessage<PushCancelAll>(NULL);
  }

  PushCancelAll* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PushCancelAll>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PushCancelAll& from);
  void MergeFrom(const PushCancelAll& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PushCancelAll* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // .models.AccountBody Body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::models::AccountBody& _internal_body() const;
  public:
  const ::models::AccountBody& body() const;
  ::models::AccountBody* release_body();
  ::models::AccountBody* mutable_body();
  void set_allocated_body(::models::AccountBody* body);

  // @@protoc_insertion_point(class_scope:models.PushCancelAll)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::models::MessageHeader* header_;
  ::models::AccountBody* body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PullOrders : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.PullOrders) */ {
 public:
  PullOrders();
  virtual ~PullOrders();

  PullOrders(const PullOrders& from);

  inline PullOrders& operator=(const PullOrders& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullOrders(PullOrders&& from) noexcept
    : PullOrders() {
    *this = ::std::move(from);
  }

  inline PullOrders& operator=(PullOrders&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PullOrders& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullOrders* internal_default_instance() {
    return reinterpret_cast<const PullOrders*>(
               &_PullOrders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PullOrders* other);
  friend void swap(PullOrders& a, PullOrders& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullOrders* New() const final {
    return CreateMaybeMessage<PullOrders>(NULL);
  }

  PullOrders* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PullOrders>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PullOrders& from);
  void MergeFrom(const PullOrders& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullOrders* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // .models.AccountBody Body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::models::AccountBody& _internal_body() const;
  public:
  const ::models::AccountBody& body() const;
  ::models::AccountBody* release_body();
  ::models::AccountBody* mutable_body();
  void set_allocated_body(::models::AccountBody* body);

  // @@protoc_insertion_point(class_scope:models.PullOrders)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::models::MessageHeader* header_;
  ::models::AccountBody* body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PullBalances : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.PullBalances) */ {
 public:
  PullBalances();
  virtual ~PullBalances();

  PullBalances(const PullBalances& from);

  inline PullBalances& operator=(const PullBalances& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullBalances(PullBalances&& from) noexcept
    : PullBalances() {
    *this = ::std::move(from);
  }

  inline PullBalances& operator=(PullBalances&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PullBalances& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullBalances* internal_default_instance() {
    return reinterpret_cast<const PullBalances*>(
               &_PullBalances_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(PullBalances* other);
  friend void swap(PullBalances& a, PullBalances& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullBalances* New() const final {
    return CreateMaybeMessage<PullBalances>(NULL);
  }

  PullBalances* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PullBalances>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PullBalances& from);
  void MergeFrom(const PullBalances& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullBalances* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // .models.AccountBody Body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::models::AccountBody& _internal_body() const;
  public:
  const ::models::AccountBody& body() const;
  ::models::AccountBody* release_body();
  ::models::AccountBody* mutable_body();
  void set_allocated_body(::models::AccountBody* body);

  // @@protoc_insertion_point(class_scope:models.PullBalances)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::models::MessageHeader* header_;
  ::models::AccountBody* body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PullMarkets_MessageBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.PullMarkets.MessageBody) */ {
 public:
  PullMarkets_MessageBody();
  virtual ~PullMarkets_MessageBody();

  PullMarkets_MessageBody(const PullMarkets_MessageBody& from);

  inline PullMarkets_MessageBody& operator=(const PullMarkets_MessageBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullMarkets_MessageBody(PullMarkets_MessageBody&& from) noexcept
    : PullMarkets_MessageBody() {
    *this = ::std::move(from);
  }

  inline PullMarkets_MessageBody& operator=(PullMarkets_MessageBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PullMarkets_MessageBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullMarkets_MessageBody* internal_default_instance() {
    return reinterpret_cast<const PullMarkets_MessageBody*>(
               &_PullMarkets_MessageBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(PullMarkets_MessageBody* other);
  friend void swap(PullMarkets_MessageBody& a, PullMarkets_MessageBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullMarkets_MessageBody* New() const final {
    return CreateMaybeMessage<PullMarkets_MessageBody>(NULL);
  }

  PullMarkets_MessageBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PullMarkets_MessageBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PullMarkets_MessageBody& from);
  void MergeFrom(const PullMarkets_MessageBody& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullMarkets_MessageBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Exchange = 1;
  void clear_exchange();
  static const int kExchangeFieldNumber = 1;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // @@protoc_insertion_point(class_scope:models.PullMarkets.MessageBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5frobot_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PullMarkets : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.PullMarkets) */ {
 public:
  PullMarkets();
  virtual ~PullMarkets();

  PullMarkets(const PullMarkets& from);

  inline PullMarkets& operator=(const PullMarkets& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PullMarkets(PullMarkets&& from) noexcept
    : PullMarkets() {
    *this = ::std::move(from);
  }

  inline PullMarkets& operator=(PullMarkets&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PullMarkets& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PullMarkets* internal_default_instance() {
    return reinterpret_cast<const PullMarkets*>(
               &_PullMarkets_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(PullMarkets* other);
  friend void swap(PullMarkets& a, PullMarkets& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PullMarkets* New() const final {
    return CreateMaybeMessage<PullMarkets>(NULL);
  }

  PullMarkets* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PullMarkets>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PullMarkets& from);
  void MergeFrom(const PullMarkets& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PullMarkets* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PullMarkets_MessageBody MessageBody;

  // accessors -------------------------------------------------------

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // .models.PullMarkets.MessageBody Body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::models::PullMarkets_MessageBody& _internal_body() const;
  public:
  const ::models::PullMarkets_MessageBody& body() const;
  ::models::PullMarkets_MessageBody* release_body();
  ::models::PullMarkets_MessageBody* mutable_body();
  void set_allocated_body(::models::PullMarkets_MessageBody* body);

  // @@protoc_insertion_point(class_scope:models.PullMarkets)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::models::MessageHeader* header_;
  ::models::PullMarkets_MessageBody* body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5frobot_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccountBody

// string Alias = 1;
inline void AccountBody::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountBody::alias() const {
  // @@protoc_insertion_point(field_get:models.AccountBody.Alias)
  return alias_.GetNoArena();
}
inline void AccountBody::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.AccountBody.Alias)
}
#if LANG_CXX11
inline void AccountBody::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.AccountBody.Alias)
}
#endif
inline void AccountBody::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.AccountBody.Alias)
}
inline void AccountBody::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.AccountBody.Alias)
}
inline ::std::string* AccountBody::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:models.AccountBody.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountBody::release_alias() {
  // @@protoc_insertion_point(field_release:models.AccountBody.Alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountBody::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:models.AccountBody.Alias)
}

// string Exchange = 3;
inline void AccountBody::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AccountBody::exchange() const {
  // @@protoc_insertion_point(field_get:models.AccountBody.Exchange)
  return exchange_.GetNoArena();
}
inline void AccountBody::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.AccountBody.Exchange)
}
#if LANG_CXX11
inline void AccountBody::set_exchange(::std::string&& value) {
  
  exchange_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.AccountBody.Exchange)
}
#endif
inline void AccountBody::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.AccountBody.Exchange)
}
inline void AccountBody::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.AccountBody.Exchange)
}
inline ::std::string* AccountBody::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:models.AccountBody.Exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AccountBody::release_exchange() {
  // @@protoc_insertion_point(field_release:models.AccountBody.Exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AccountBody::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:models.AccountBody.Exchange)
}

// -------------------------------------------------------------------

// PushLogin

// .models.MessageHeader Header = 1;
inline bool PushLogin::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& PushLogin::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& PushLogin::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.PushLogin.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* PushLogin::release_header() {
  // @@protoc_insertion_point(field_release:models.PushLogin.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* PushLogin::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PushLogin.Header)
  return header_;
}
inline void PushLogin::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.PushLogin.Header)
}

// .models.AccountBody Body = 2;
inline bool PushLogin::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline void PushLogin::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
}
inline const ::models::AccountBody& PushLogin::_internal_body() const {
  return *body_;
}
inline const ::models::AccountBody& PushLogin::body() const {
  const ::models::AccountBody* p = body_;
  // @@protoc_insertion_point(field_get:models.PushLogin.Body)
  return p != NULL ? *p : *reinterpret_cast<const ::models::AccountBody*>(
      &::models::_AccountBody_default_instance_);
}
inline ::models::AccountBody* PushLogin::release_body() {
  // @@protoc_insertion_point(field_release:models.PushLogin.Body)
  
  ::models::AccountBody* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::models::AccountBody* PushLogin::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::models::AccountBody>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PushLogin.Body)
  return body_;
}
inline void PushLogin::set_allocated_body(::models::AccountBody* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:models.PushLogin.Body)
}

// -------------------------------------------------------------------

// PushOrder

// .models.MessageHeader Header = 1;
inline bool PushOrder::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& PushOrder::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& PushOrder::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.PushOrder.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* PushOrder::release_header() {
  // @@protoc_insertion_point(field_release:models.PushOrder.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* PushOrder::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PushOrder.Header)
  return header_;
}
inline void PushOrder::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.PushOrder.Header)
}

// .models.NewOrder Body = 2;
inline bool PushOrder::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline const ::models::NewOrder& PushOrder::_internal_body() const {
  return *body_;
}
inline const ::models::NewOrder& PushOrder::body() const {
  const ::models::NewOrder* p = body_;
  // @@protoc_insertion_point(field_get:models.PushOrder.Body)
  return p != NULL ? *p : *reinterpret_cast<const ::models::NewOrder*>(
      &::models::_NewOrder_default_instance_);
}
inline ::models::NewOrder* PushOrder::release_body() {
  // @@protoc_insertion_point(field_release:models.PushOrder.Body)
  
  ::models::NewOrder* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::models::NewOrder* PushOrder::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::models::NewOrder>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PushOrder.Body)
  return body_;
}
inline void PushOrder::set_allocated_body(::models::NewOrder* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(body_);
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:models.PushOrder.Body)
}

// -------------------------------------------------------------------

// PushCancel

// .models.MessageHeader Header = 1;
inline bool PushCancel::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& PushCancel::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& PushCancel::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.PushCancel.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* PushCancel::release_header() {
  // @@protoc_insertion_point(field_release:models.PushCancel.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* PushCancel::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PushCancel.Header)
  return header_;
}
inline void PushCancel::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.PushCancel.Header)
}

// .models.CancelOrder Body = 2;
inline bool PushCancel::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline const ::models::CancelOrder& PushCancel::_internal_body() const {
  return *body_;
}
inline const ::models::CancelOrder& PushCancel::body() const {
  const ::models::CancelOrder* p = body_;
  // @@protoc_insertion_point(field_get:models.PushCancel.Body)
  return p != NULL ? *p : *reinterpret_cast<const ::models::CancelOrder*>(
      &::models::_CancelOrder_default_instance_);
}
inline ::models::CancelOrder* PushCancel::release_body() {
  // @@protoc_insertion_point(field_release:models.PushCancel.Body)
  
  ::models::CancelOrder* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::models::CancelOrder* PushCancel::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::models::CancelOrder>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PushCancel.Body)
  return body_;
}
inline void PushCancel::set_allocated_body(::models::CancelOrder* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(body_);
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:models.PushCancel.Body)
}

// -------------------------------------------------------------------

// PushCancelAll

// .models.MessageHeader Header = 1;
inline bool PushCancelAll::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& PushCancelAll::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& PushCancelAll::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.PushCancelAll.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* PushCancelAll::release_header() {
  // @@protoc_insertion_point(field_release:models.PushCancelAll.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* PushCancelAll::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PushCancelAll.Header)
  return header_;
}
inline void PushCancelAll::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.PushCancelAll.Header)
}

// .models.AccountBody Body = 2;
inline bool PushCancelAll::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline void PushCancelAll::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
}
inline const ::models::AccountBody& PushCancelAll::_internal_body() const {
  return *body_;
}
inline const ::models::AccountBody& PushCancelAll::body() const {
  const ::models::AccountBody* p = body_;
  // @@protoc_insertion_point(field_get:models.PushCancelAll.Body)
  return p != NULL ? *p : *reinterpret_cast<const ::models::AccountBody*>(
      &::models::_AccountBody_default_instance_);
}
inline ::models::AccountBody* PushCancelAll::release_body() {
  // @@protoc_insertion_point(field_release:models.PushCancelAll.Body)
  
  ::models::AccountBody* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::models::AccountBody* PushCancelAll::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::models::AccountBody>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PushCancelAll.Body)
  return body_;
}
inline void PushCancelAll::set_allocated_body(::models::AccountBody* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:models.PushCancelAll.Body)
}

// -------------------------------------------------------------------

// PullOrders

// .models.MessageHeader Header = 1;
inline bool PullOrders::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& PullOrders::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& PullOrders::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.PullOrders.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* PullOrders::release_header() {
  // @@protoc_insertion_point(field_release:models.PullOrders.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* PullOrders::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PullOrders.Header)
  return header_;
}
inline void PullOrders::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.PullOrders.Header)
}

// .models.AccountBody Body = 2;
inline bool PullOrders::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline void PullOrders::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
}
inline const ::models::AccountBody& PullOrders::_internal_body() const {
  return *body_;
}
inline const ::models::AccountBody& PullOrders::body() const {
  const ::models::AccountBody* p = body_;
  // @@protoc_insertion_point(field_get:models.PullOrders.Body)
  return p != NULL ? *p : *reinterpret_cast<const ::models::AccountBody*>(
      &::models::_AccountBody_default_instance_);
}
inline ::models::AccountBody* PullOrders::release_body() {
  // @@protoc_insertion_point(field_release:models.PullOrders.Body)
  
  ::models::AccountBody* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::models::AccountBody* PullOrders::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::models::AccountBody>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PullOrders.Body)
  return body_;
}
inline void PullOrders::set_allocated_body(::models::AccountBody* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:models.PullOrders.Body)
}

// -------------------------------------------------------------------

// PullBalances

// .models.MessageHeader Header = 1;
inline bool PullBalances::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& PullBalances::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& PullBalances::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.PullBalances.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* PullBalances::release_header() {
  // @@protoc_insertion_point(field_release:models.PullBalances.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* PullBalances::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PullBalances.Header)
  return header_;
}
inline void PullBalances::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.PullBalances.Header)
}

// .models.AccountBody Body = 2;
inline bool PullBalances::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline void PullBalances::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
}
inline const ::models::AccountBody& PullBalances::_internal_body() const {
  return *body_;
}
inline const ::models::AccountBody& PullBalances::body() const {
  const ::models::AccountBody* p = body_;
  // @@protoc_insertion_point(field_get:models.PullBalances.Body)
  return p != NULL ? *p : *reinterpret_cast<const ::models::AccountBody*>(
      &::models::_AccountBody_default_instance_);
}
inline ::models::AccountBody* PullBalances::release_body() {
  // @@protoc_insertion_point(field_release:models.PullBalances.Body)
  
  ::models::AccountBody* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::models::AccountBody* PullBalances::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::models::AccountBody>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PullBalances.Body)
  return body_;
}
inline void PullBalances::set_allocated_body(::models::AccountBody* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:models.PullBalances.Body)
}

// -------------------------------------------------------------------

// PullMarkets_MessageBody

// string Exchange = 1;
inline void PullMarkets_MessageBody::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PullMarkets_MessageBody::exchange() const {
  // @@protoc_insertion_point(field_get:models.PullMarkets.MessageBody.Exchange)
  return exchange_.GetNoArena();
}
inline void PullMarkets_MessageBody::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.PullMarkets.MessageBody.Exchange)
}
#if LANG_CXX11
inline void PullMarkets_MessageBody::set_exchange(::std::string&& value) {
  
  exchange_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.PullMarkets.MessageBody.Exchange)
}
#endif
inline void PullMarkets_MessageBody::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.PullMarkets.MessageBody.Exchange)
}
inline void PullMarkets_MessageBody::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.PullMarkets.MessageBody.Exchange)
}
inline ::std::string* PullMarkets_MessageBody::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:models.PullMarkets.MessageBody.Exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PullMarkets_MessageBody::release_exchange() {
  // @@protoc_insertion_point(field_release:models.PullMarkets.MessageBody.Exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PullMarkets_MessageBody::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:models.PullMarkets.MessageBody.Exchange)
}

// -------------------------------------------------------------------

// PullMarkets

// .models.MessageHeader Header = 1;
inline bool PullMarkets::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& PullMarkets::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& PullMarkets::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.PullMarkets.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* PullMarkets::release_header() {
  // @@protoc_insertion_point(field_release:models.PullMarkets.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* PullMarkets::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PullMarkets.Header)
  return header_;
}
inline void PullMarkets::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.PullMarkets.Header)
}

// .models.PullMarkets.MessageBody Body = 2;
inline bool PullMarkets::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline void PullMarkets::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
}
inline const ::models::PullMarkets_MessageBody& PullMarkets::_internal_body() const {
  return *body_;
}
inline const ::models::PullMarkets_MessageBody& PullMarkets::body() const {
  const ::models::PullMarkets_MessageBody* p = body_;
  // @@protoc_insertion_point(field_get:models.PullMarkets.Body)
  return p != NULL ? *p : *reinterpret_cast<const ::models::PullMarkets_MessageBody*>(
      &::models::_PullMarkets_MessageBody_default_instance_);
}
inline ::models::PullMarkets_MessageBody* PullMarkets::release_body() {
  // @@protoc_insertion_point(field_release:models.PullMarkets.Body)
  
  ::models::PullMarkets_MessageBody* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::models::PullMarkets_MessageBody* PullMarkets::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::models::PullMarkets_MessageBody>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PullMarkets.Body)
  return body_;
}
inline void PullMarkets::set_allocated_body(::models::PullMarkets_MessageBody* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:models.PullMarkets.Body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace models

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_messages_5frobot_2eproto
