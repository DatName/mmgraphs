// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_indicators.proto

#ifndef PROTOBUF_INCLUDED_messages_5findicators_2eproto
#define PROTOBUF_INCLUDED_messages_5findicators_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "messages_generic.pb.h"
#include "order.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5findicators_2eproto 

namespace protobuf_messages_5findicators_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[12];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_messages_5findicators_2eproto
namespace models {
class BalancesIndicator;
class BalancesIndicatorDefaultTypeInternal;
extern BalancesIndicatorDefaultTypeInternal _BalancesIndicator_default_instance_;
class BalancesIndicator_Balance;
class BalancesIndicator_BalanceDefaultTypeInternal;
extern BalancesIndicator_BalanceDefaultTypeInternal _BalancesIndicator_Balance_default_instance_;
class BalancesIndicator_Balance_AvailableEntry_DoNotUse;
class BalancesIndicator_Balance_AvailableEntry_DoNotUseDefaultTypeInternal;
extern BalancesIndicator_Balance_AvailableEntry_DoNotUseDefaultTypeInternal _BalancesIndicator_Balance_AvailableEntry_DoNotUse_default_instance_;
class BalancesIndicator_Balance_TotalEntry_DoNotUse;
class BalancesIndicator_Balance_TotalEntry_DoNotUseDefaultTypeInternal;
extern BalancesIndicator_Balance_TotalEntry_DoNotUseDefaultTypeInternal _BalancesIndicator_Balance_TotalEntry_DoNotUse_default_instance_;
class CanceledOrderIndicator;
class CanceledOrderIndicatorDefaultTypeInternal;
extern CanceledOrderIndicatorDefaultTypeInternal _CanceledOrderIndicator_default_instance_;
class MarketdataIndicator;
class MarketdataIndicatorDefaultTypeInternal;
extern MarketdataIndicatorDefaultTypeInternal _MarketdataIndicator_default_instance_;
class MarketdataIndicator_MarketInd;
class MarketdataIndicator_MarketIndDefaultTypeInternal;
extern MarketdataIndicator_MarketIndDefaultTypeInternal _MarketdataIndicator_MarketInd_default_instance_;
class MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse;
class MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUseDefaultTypeInternal;
extern MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUseDefaultTypeInternal _MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse_default_instance_;
class OpenOrdersIndicator;
class OpenOrdersIndicatorDefaultTypeInternal;
extern OpenOrdersIndicatorDefaultTypeInternal _OpenOrdersIndicator_default_instance_;
class PlacedOrderIndicator;
class PlacedOrderIndicatorDefaultTypeInternal;
extern PlacedOrderIndicatorDefaultTypeInternal _PlacedOrderIndicator_default_instance_;
class TradeIndicator;
class TradeIndicatorDefaultTypeInternal;
extern TradeIndicatorDefaultTypeInternal _TradeIndicator_default_instance_;
class TradeIndicator_Trade;
class TradeIndicator_TradeDefaultTypeInternal;
extern TradeIndicator_TradeDefaultTypeInternal _TradeIndicator_Trade_default_instance_;
}  // namespace models
namespace google {
namespace protobuf {
template<> ::models::BalancesIndicator* Arena::CreateMaybeMessage<::models::BalancesIndicator>(Arena*);
template<> ::models::BalancesIndicator_Balance* Arena::CreateMaybeMessage<::models::BalancesIndicator_Balance>(Arena*);
template<> ::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse* Arena::CreateMaybeMessage<::models::BalancesIndicator_Balance_AvailableEntry_DoNotUse>(Arena*);
template<> ::models::BalancesIndicator_Balance_TotalEntry_DoNotUse* Arena::CreateMaybeMessage<::models::BalancesIndicator_Balance_TotalEntry_DoNotUse>(Arena*);
template<> ::models::CanceledOrderIndicator* Arena::CreateMaybeMessage<::models::CanceledOrderIndicator>(Arena*);
template<> ::models::MarketdataIndicator* Arena::CreateMaybeMessage<::models::MarketdataIndicator>(Arena*);
template<> ::models::MarketdataIndicator_MarketInd* Arena::CreateMaybeMessage<::models::MarketdataIndicator_MarketInd>(Arena*);
template<> ::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse* Arena::CreateMaybeMessage<::models::MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse>(Arena*);
template<> ::models::OpenOrdersIndicator* Arena::CreateMaybeMessage<::models::OpenOrdersIndicator>(Arena*);
template<> ::models::PlacedOrderIndicator* Arena::CreateMaybeMessage<::models::PlacedOrderIndicator>(Arena*);
template<> ::models::TradeIndicator* Arena::CreateMaybeMessage<::models::TradeIndicator>(Arena*);
template<> ::models::TradeIndicator_Trade* Arena::CreateMaybeMessage<::models::TradeIndicator_Trade>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace models {

// ===================================================================

class MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse();
  MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse& other);
  static const MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse*>(&_MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class MarketdataIndicator_MarketInd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.MarketdataIndicator.MarketInd) */ {
 public:
  MarketdataIndicator_MarketInd();
  virtual ~MarketdataIndicator_MarketInd();

  MarketdataIndicator_MarketInd(const MarketdataIndicator_MarketInd& from);

  inline MarketdataIndicator_MarketInd& operator=(const MarketdataIndicator_MarketInd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketdataIndicator_MarketInd(MarketdataIndicator_MarketInd&& from) noexcept
    : MarketdataIndicator_MarketInd() {
    *this = ::std::move(from);
  }

  inline MarketdataIndicator_MarketInd& operator=(MarketdataIndicator_MarketInd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketdataIndicator_MarketInd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketdataIndicator_MarketInd* internal_default_instance() {
    return reinterpret_cast<const MarketdataIndicator_MarketInd*>(
               &_MarketdataIndicator_MarketInd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MarketdataIndicator_MarketInd* other);
  friend void swap(MarketdataIndicator_MarketInd& a, MarketdataIndicator_MarketInd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketdataIndicator_MarketInd* New() const final {
    return CreateMaybeMessage<MarketdataIndicator_MarketInd>(NULL);
  }

  MarketdataIndicator_MarketInd* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarketdataIndicator_MarketInd>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarketdataIndicator_MarketInd& from);
  void MergeFrom(const MarketdataIndicator_MarketInd& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketdataIndicator_MarketInd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, double> Indicators = 3;
  int indicators_size() const;
  void clear_indicators();
  static const int kIndicatorsFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, double >&
      indicators() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_indicators();

  // string Symbol = 1;
  void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string Exchange = 2;
  void clear_exchange();
  static const int kExchangeFieldNumber = 2;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // @@protoc_insertion_point(class_scope:models.MarketdataIndicator.MarketInd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      MarketdataIndicator_MarketInd_IndicatorsEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > indicators_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5findicators_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MarketdataIndicator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.MarketdataIndicator) */ {
 public:
  MarketdataIndicator();
  virtual ~MarketdataIndicator();

  MarketdataIndicator(const MarketdataIndicator& from);

  inline MarketdataIndicator& operator=(const MarketdataIndicator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MarketdataIndicator(MarketdataIndicator&& from) noexcept
    : MarketdataIndicator() {
    *this = ::std::move(from);
  }

  inline MarketdataIndicator& operator=(MarketdataIndicator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketdataIndicator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MarketdataIndicator* internal_default_instance() {
    return reinterpret_cast<const MarketdataIndicator*>(
               &_MarketdataIndicator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MarketdataIndicator* other);
  friend void swap(MarketdataIndicator& a, MarketdataIndicator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MarketdataIndicator* New() const final {
    return CreateMaybeMessage<MarketdataIndicator>(NULL);
  }

  MarketdataIndicator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MarketdataIndicator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MarketdataIndicator& from);
  void MergeFrom(const MarketdataIndicator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MarketdataIndicator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MarketdataIndicator_MarketInd MarketInd;

  // accessors -------------------------------------------------------

  // repeated .models.MarketdataIndicator.MarketInd Body = 2;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  ::models::MarketdataIndicator_MarketInd* mutable_body(int index);
  ::google::protobuf::RepeatedPtrField< ::models::MarketdataIndicator_MarketInd >*
      mutable_body();
  const ::models::MarketdataIndicator_MarketInd& body(int index) const;
  ::models::MarketdataIndicator_MarketInd* add_body();
  const ::google::protobuf::RepeatedPtrField< ::models::MarketdataIndicator_MarketInd >&
      body() const;

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // @@protoc_insertion_point(class_scope:models.MarketdataIndicator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::models::MarketdataIndicator_MarketInd > body_;
  ::models::MessageHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5findicators_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TradeIndicator_Trade : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.TradeIndicator.Trade) */ {
 public:
  TradeIndicator_Trade();
  virtual ~TradeIndicator_Trade();

  TradeIndicator_Trade(const TradeIndicator_Trade& from);

  inline TradeIndicator_Trade& operator=(const TradeIndicator_Trade& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradeIndicator_Trade(TradeIndicator_Trade&& from) noexcept
    : TradeIndicator_Trade() {
    *this = ::std::move(from);
  }

  inline TradeIndicator_Trade& operator=(TradeIndicator_Trade&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeIndicator_Trade& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeIndicator_Trade* internal_default_instance() {
    return reinterpret_cast<const TradeIndicator_Trade*>(
               &_TradeIndicator_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TradeIndicator_Trade* other);
  friend void swap(TradeIndicator_Trade& a, TradeIndicator_Trade& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradeIndicator_Trade* New() const final {
    return CreateMaybeMessage<TradeIndicator_Trade>(NULL);
  }

  TradeIndicator_Trade* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradeIndicator_Trade>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradeIndicator_Trade& from);
  void MergeFrom(const TradeIndicator_Trade& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeIndicator_Trade* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string Account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string Exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // string Client = 4;
  void clear_client();
  static const int kClientFieldNumber = 4;
  const ::std::string& client() const;
  void set_client(const ::std::string& value);
  #if LANG_CXX11
  void set_client(::std::string&& value);
  #endif
  void set_client(const char* value);
  void set_client(const char* value, size_t size);
  ::std::string* mutable_client();
  ::std::string* release_client();
  void set_allocated_client(::std::string* client);

  // string Symbol = 6;
  void clear_symbol();
  static const int kSymbolFieldNumber = 6;
  const ::std::string& symbol() const;
  void set_symbol(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol(::std::string&& value);
  #endif
  void set_symbol(const char* value);
  void set_symbol(const char* value, size_t size);
  ::std::string* mutable_symbol();
  ::std::string* release_symbol();
  void set_allocated_symbol(::std::string* symbol);

  // string Id = 11;
  void clear_id();
  static const int kIdFieldNumber = 11;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // string LimitId = 12;
  void clear_limitid();
  static const int kLimitIdFieldNumber = 12;
  const ::std::string& limitid() const;
  void set_limitid(const ::std::string& value);
  #if LANG_CXX11
  void set_limitid(::std::string&& value);
  #endif
  void set_limitid(const char* value);
  void set_limitid(const char* value, size_t size);
  ::std::string* mutable_limitid();
  ::std::string* release_limitid();
  void set_allocated_limitid(::std::string* limitid);

  // int64 Tag = 5;
  void clear_tag();
  static const int kTagFieldNumber = 5;
  ::google::protobuf::int64 tag() const;
  void set_tag(::google::protobuf::int64 value);

  // double Size = 8;
  void clear_size();
  static const int kSizeFieldNumber = 8;
  double size() const;
  void set_size(double value);

  // double Volume = 9;
  void clear_volume();
  static const int kVolumeFieldNumber = 9;
  double volume() const;
  void set_volume(double value);

  // double Price = 10;
  void clear_price();
  static const int kPriceFieldNumber = 10;
  double price() const;
  void set_price(double value);

  // int64 Timestamp = 13;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 13;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // .models.OrderSide Side = 7;
  void clear_side();
  static const int kSideFieldNumber = 7;
  ::models::OrderSide side() const;
  void set_side(::models::OrderSide value);

  // @@protoc_insertion_point(class_scope:models.TradeIndicator.Trade)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  ::google::protobuf::internal::ArenaStringPtr client_;
  ::google::protobuf::internal::ArenaStringPtr symbol_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr limitid_;
  ::google::protobuf::int64 tag_;
  double size_;
  double volume_;
  double price_;
  ::google::protobuf::int64 timestamp_;
  int side_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5findicators_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TradeIndicator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.TradeIndicator) */ {
 public:
  TradeIndicator();
  virtual ~TradeIndicator();

  TradeIndicator(const TradeIndicator& from);

  inline TradeIndicator& operator=(const TradeIndicator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TradeIndicator(TradeIndicator&& from) noexcept
    : TradeIndicator() {
    *this = ::std::move(from);
  }

  inline TradeIndicator& operator=(TradeIndicator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TradeIndicator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TradeIndicator* internal_default_instance() {
    return reinterpret_cast<const TradeIndicator*>(
               &_TradeIndicator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(TradeIndicator* other);
  friend void swap(TradeIndicator& a, TradeIndicator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TradeIndicator* New() const final {
    return CreateMaybeMessage<TradeIndicator>(NULL);
  }

  TradeIndicator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TradeIndicator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TradeIndicator& from);
  void MergeFrom(const TradeIndicator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TradeIndicator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TradeIndicator_Trade Trade;

  // accessors -------------------------------------------------------

  // repeated .models.TradeIndicator.Trade Body = 2;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  ::models::TradeIndicator_Trade* mutable_body(int index);
  ::google::protobuf::RepeatedPtrField< ::models::TradeIndicator_Trade >*
      mutable_body();
  const ::models::TradeIndicator_Trade& body(int index) const;
  ::models::TradeIndicator_Trade* add_body();
  const ::google::protobuf::RepeatedPtrField< ::models::TradeIndicator_Trade >&
      body() const;

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // @@protoc_insertion_point(class_scope:models.TradeIndicator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::models::TradeIndicator_Trade > body_;
  ::models::MessageHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5findicators_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BalancesIndicator_Balance_TotalEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<BalancesIndicator_Balance_TotalEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<BalancesIndicator_Balance_TotalEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  BalancesIndicator_Balance_TotalEntry_DoNotUse();
  BalancesIndicator_Balance_TotalEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const BalancesIndicator_Balance_TotalEntry_DoNotUse& other);
  static const BalancesIndicator_Balance_TotalEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BalancesIndicator_Balance_TotalEntry_DoNotUse*>(&_BalancesIndicator_Balance_TotalEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class BalancesIndicator_Balance_AvailableEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<BalancesIndicator_Balance_AvailableEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<BalancesIndicator_Balance_AvailableEntry_DoNotUse, 
    ::std::string, double,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
    0 > SuperType;
  BalancesIndicator_Balance_AvailableEntry_DoNotUse();
  BalancesIndicator_Balance_AvailableEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const BalancesIndicator_Balance_AvailableEntry_DoNotUse& other);
  static const BalancesIndicator_Balance_AvailableEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BalancesIndicator_Balance_AvailableEntry_DoNotUse*>(&_BalancesIndicator_Balance_AvailableEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class BalancesIndicator_Balance : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.BalancesIndicator.Balance) */ {
 public:
  BalancesIndicator_Balance();
  virtual ~BalancesIndicator_Balance();

  BalancesIndicator_Balance(const BalancesIndicator_Balance& from);

  inline BalancesIndicator_Balance& operator=(const BalancesIndicator_Balance& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BalancesIndicator_Balance(BalancesIndicator_Balance&& from) noexcept
    : BalancesIndicator_Balance() {
    *this = ::std::move(from);
  }

  inline BalancesIndicator_Balance& operator=(BalancesIndicator_Balance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BalancesIndicator_Balance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BalancesIndicator_Balance* internal_default_instance() {
    return reinterpret_cast<const BalancesIndicator_Balance*>(
               &_BalancesIndicator_Balance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(BalancesIndicator_Balance* other);
  friend void swap(BalancesIndicator_Balance& a, BalancesIndicator_Balance& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BalancesIndicator_Balance* New() const final {
    return CreateMaybeMessage<BalancesIndicator_Balance>(NULL);
  }

  BalancesIndicator_Balance* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BalancesIndicator_Balance>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BalancesIndicator_Balance& from);
  void MergeFrom(const BalancesIndicator_Balance& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BalancesIndicator_Balance* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, double> Total = 4;
  int total_size() const;
  void clear_total();
  static const int kTotalFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, double >&
      total() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_total();

  // map<string, double> Available = 5;
  int available_size() const;
  void clear_available();
  static const int kAvailableFieldNumber = 5;
  const ::google::protobuf::Map< ::std::string, double >&
      available() const;
  ::google::protobuf::Map< ::std::string, double >*
      mutable_available();

  // string Alias = 1;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // string Account = 2;
  void clear_account();
  static const int kAccountFieldNumber = 2;
  const ::std::string& account() const;
  void set_account(const ::std::string& value);
  #if LANG_CXX11
  void set_account(::std::string&& value);
  #endif
  void set_account(const char* value);
  void set_account(const char* value, size_t size);
  ::std::string* mutable_account();
  ::std::string* release_account();
  void set_allocated_account(::std::string* account);

  // string Exchange = 3;
  void clear_exchange();
  static const int kExchangeFieldNumber = 3;
  const ::std::string& exchange() const;
  void set_exchange(const ::std::string& value);
  #if LANG_CXX11
  void set_exchange(::std::string&& value);
  #endif
  void set_exchange(const char* value);
  void set_exchange(const char* value, size_t size);
  ::std::string* mutable_exchange();
  ::std::string* release_exchange();
  void set_allocated_exchange(::std::string* exchange);

  // @@protoc_insertion_point(class_scope:models.BalancesIndicator.Balance)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      BalancesIndicator_Balance_TotalEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > total_;
  ::google::protobuf::internal::MapField<
      BalancesIndicator_Balance_AvailableEntry_DoNotUse,
      ::std::string, double,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE,
      0 > available_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr account_;
  ::google::protobuf::internal::ArenaStringPtr exchange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5findicators_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BalancesIndicator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.BalancesIndicator) */ {
 public:
  BalancesIndicator();
  virtual ~BalancesIndicator();

  BalancesIndicator(const BalancesIndicator& from);

  inline BalancesIndicator& operator=(const BalancesIndicator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BalancesIndicator(BalancesIndicator&& from) noexcept
    : BalancesIndicator() {
    *this = ::std::move(from);
  }

  inline BalancesIndicator& operator=(BalancesIndicator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BalancesIndicator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BalancesIndicator* internal_default_instance() {
    return reinterpret_cast<const BalancesIndicator*>(
               &_BalancesIndicator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(BalancesIndicator* other);
  friend void swap(BalancesIndicator& a, BalancesIndicator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BalancesIndicator* New() const final {
    return CreateMaybeMessage<BalancesIndicator>(NULL);
  }

  BalancesIndicator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BalancesIndicator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BalancesIndicator& from);
  void MergeFrom(const BalancesIndicator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BalancesIndicator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BalancesIndicator_Balance Balance;

  // accessors -------------------------------------------------------

  // repeated .models.BalancesIndicator.Balance Body = 2;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  ::models::BalancesIndicator_Balance* mutable_body(int index);
  ::google::protobuf::RepeatedPtrField< ::models::BalancesIndicator_Balance >*
      mutable_body();
  const ::models::BalancesIndicator_Balance& body(int index) const;
  ::models::BalancesIndicator_Balance* add_body();
  const ::google::protobuf::RepeatedPtrField< ::models::BalancesIndicator_Balance >&
      body() const;

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // @@protoc_insertion_point(class_scope:models.BalancesIndicator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::models::BalancesIndicator_Balance > body_;
  ::models::MessageHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5findicators_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OpenOrdersIndicator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.OpenOrdersIndicator) */ {
 public:
  OpenOrdersIndicator();
  virtual ~OpenOrdersIndicator();

  OpenOrdersIndicator(const OpenOrdersIndicator& from);

  inline OpenOrdersIndicator& operator=(const OpenOrdersIndicator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OpenOrdersIndicator(OpenOrdersIndicator&& from) noexcept
    : OpenOrdersIndicator() {
    *this = ::std::move(from);
  }

  inline OpenOrdersIndicator& operator=(OpenOrdersIndicator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const OpenOrdersIndicator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OpenOrdersIndicator* internal_default_instance() {
    return reinterpret_cast<const OpenOrdersIndicator*>(
               &_OpenOrdersIndicator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(OpenOrdersIndicator* other);
  friend void swap(OpenOrdersIndicator& a, OpenOrdersIndicator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OpenOrdersIndicator* New() const final {
    return CreateMaybeMessage<OpenOrdersIndicator>(NULL);
  }

  OpenOrdersIndicator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OpenOrdersIndicator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OpenOrdersIndicator& from);
  void MergeFrom(const OpenOrdersIndicator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OpenOrdersIndicator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .models.Order Body = 2;
  int body_size() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  ::models::Order* mutable_body(int index);
  ::google::protobuf::RepeatedPtrField< ::models::Order >*
      mutable_body();
  const ::models::Order& body(int index) const;
  ::models::Order* add_body();
  const ::google::protobuf::RepeatedPtrField< ::models::Order >&
      body() const;

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // @@protoc_insertion_point(class_scope:models.OpenOrdersIndicator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::models::Order > body_;
  ::models::MessageHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5findicators_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlacedOrderIndicator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.PlacedOrderIndicator) */ {
 public:
  PlacedOrderIndicator();
  virtual ~PlacedOrderIndicator();

  PlacedOrderIndicator(const PlacedOrderIndicator& from);

  inline PlacedOrderIndicator& operator=(const PlacedOrderIndicator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlacedOrderIndicator(PlacedOrderIndicator&& from) noexcept
    : PlacedOrderIndicator() {
    *this = ::std::move(from);
  }

  inline PlacedOrderIndicator& operator=(PlacedOrderIndicator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlacedOrderIndicator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlacedOrderIndicator* internal_default_instance() {
    return reinterpret_cast<const PlacedOrderIndicator*>(
               &_PlacedOrderIndicator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(PlacedOrderIndicator* other);
  friend void swap(PlacedOrderIndicator& a, PlacedOrderIndicator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlacedOrderIndicator* New() const final {
    return CreateMaybeMessage<PlacedOrderIndicator>(NULL);
  }

  PlacedOrderIndicator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlacedOrderIndicator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlacedOrderIndicator& from);
  void MergeFrom(const PlacedOrderIndicator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlacedOrderIndicator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // .models.Order Body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::models::Order& _internal_body() const;
  public:
  const ::models::Order& body() const;
  ::models::Order* release_body();
  ::models::Order* mutable_body();
  void set_allocated_body(::models::Order* body);

  // @@protoc_insertion_point(class_scope:models.PlacedOrderIndicator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::models::MessageHeader* header_;
  ::models::Order* body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5findicators_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CanceledOrderIndicator : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.CanceledOrderIndicator) */ {
 public:
  CanceledOrderIndicator();
  virtual ~CanceledOrderIndicator();

  CanceledOrderIndicator(const CanceledOrderIndicator& from);

  inline CanceledOrderIndicator& operator=(const CanceledOrderIndicator& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CanceledOrderIndicator(CanceledOrderIndicator&& from) noexcept
    : CanceledOrderIndicator() {
    *this = ::std::move(from);
  }

  inline CanceledOrderIndicator& operator=(CanceledOrderIndicator&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CanceledOrderIndicator& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CanceledOrderIndicator* internal_default_instance() {
    return reinterpret_cast<const CanceledOrderIndicator*>(
               &_CanceledOrderIndicator_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CanceledOrderIndicator* other);
  friend void swap(CanceledOrderIndicator& a, CanceledOrderIndicator& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CanceledOrderIndicator* New() const final {
    return CreateMaybeMessage<CanceledOrderIndicator>(NULL);
  }

  CanceledOrderIndicator* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CanceledOrderIndicator>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CanceledOrderIndicator& from);
  void MergeFrom(const CanceledOrderIndicator& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CanceledOrderIndicator* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // .models.Order Body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::models::Order& _internal_body() const;
  public:
  const ::models::Order& body() const;
  ::models::Order* release_body();
  ::models::Order* mutable_body();
  void set_allocated_body(::models::Order* body);

  // @@protoc_insertion_point(class_scope:models.CanceledOrderIndicator)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::models::MessageHeader* header_;
  ::models::Order* body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5findicators_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MarketdataIndicator_MarketInd

// string Symbol = 1;
inline void MarketdataIndicator_MarketInd::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketdataIndicator_MarketInd::symbol() const {
  // @@protoc_insertion_point(field_get:models.MarketdataIndicator.MarketInd.Symbol)
  return symbol_.GetNoArena();
}
inline void MarketdataIndicator_MarketInd::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.MarketdataIndicator.MarketInd.Symbol)
}
#if LANG_CXX11
inline void MarketdataIndicator_MarketInd::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.MarketdataIndicator.MarketInd.Symbol)
}
#endif
inline void MarketdataIndicator_MarketInd::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.MarketdataIndicator.MarketInd.Symbol)
}
inline void MarketdataIndicator_MarketInd::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.MarketdataIndicator.MarketInd.Symbol)
}
inline ::std::string* MarketdataIndicator_MarketInd::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:models.MarketdataIndicator.MarketInd.Symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketdataIndicator_MarketInd::release_symbol() {
  // @@protoc_insertion_point(field_release:models.MarketdataIndicator.MarketInd.Symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketdataIndicator_MarketInd::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:models.MarketdataIndicator.MarketInd.Symbol)
}

// string Exchange = 2;
inline void MarketdataIndicator_MarketInd::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketdataIndicator_MarketInd::exchange() const {
  // @@protoc_insertion_point(field_get:models.MarketdataIndicator.MarketInd.Exchange)
  return exchange_.GetNoArena();
}
inline void MarketdataIndicator_MarketInd::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.MarketdataIndicator.MarketInd.Exchange)
}
#if LANG_CXX11
inline void MarketdataIndicator_MarketInd::set_exchange(::std::string&& value) {
  
  exchange_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.MarketdataIndicator.MarketInd.Exchange)
}
#endif
inline void MarketdataIndicator_MarketInd::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.MarketdataIndicator.MarketInd.Exchange)
}
inline void MarketdataIndicator_MarketInd::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.MarketdataIndicator.MarketInd.Exchange)
}
inline ::std::string* MarketdataIndicator_MarketInd::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:models.MarketdataIndicator.MarketInd.Exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketdataIndicator_MarketInd::release_exchange() {
  // @@protoc_insertion_point(field_release:models.MarketdataIndicator.MarketInd.Exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketdataIndicator_MarketInd::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:models.MarketdataIndicator.MarketInd.Exchange)
}

// map<string, double> Indicators = 3;
inline int MarketdataIndicator_MarketInd::indicators_size() const {
  return indicators_.size();
}
inline void MarketdataIndicator_MarketInd::clear_indicators() {
  indicators_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
MarketdataIndicator_MarketInd::indicators() const {
  // @@protoc_insertion_point(field_map:models.MarketdataIndicator.MarketInd.Indicators)
  return indicators_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
MarketdataIndicator_MarketInd::mutable_indicators() {
  // @@protoc_insertion_point(field_mutable_map:models.MarketdataIndicator.MarketInd.Indicators)
  return indicators_.MutableMap();
}

// -------------------------------------------------------------------

// MarketdataIndicator

// .models.MessageHeader Header = 1;
inline bool MarketdataIndicator::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& MarketdataIndicator::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& MarketdataIndicator::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.MarketdataIndicator.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* MarketdataIndicator::release_header() {
  // @@protoc_insertion_point(field_release:models.MarketdataIndicator.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* MarketdataIndicator::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.MarketdataIndicator.Header)
  return header_;
}
inline void MarketdataIndicator::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.MarketdataIndicator.Header)
}

// repeated .models.MarketdataIndicator.MarketInd Body = 2;
inline int MarketdataIndicator::body_size() const {
  return body_.size();
}
inline void MarketdataIndicator::clear_body() {
  body_.Clear();
}
inline ::models::MarketdataIndicator_MarketInd* MarketdataIndicator::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:models.MarketdataIndicator.Body)
  return body_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::models::MarketdataIndicator_MarketInd >*
MarketdataIndicator::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:models.MarketdataIndicator.Body)
  return &body_;
}
inline const ::models::MarketdataIndicator_MarketInd& MarketdataIndicator::body(int index) const {
  // @@protoc_insertion_point(field_get:models.MarketdataIndicator.Body)
  return body_.Get(index);
}
inline ::models::MarketdataIndicator_MarketInd* MarketdataIndicator::add_body() {
  // @@protoc_insertion_point(field_add:models.MarketdataIndicator.Body)
  return body_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::models::MarketdataIndicator_MarketInd >&
MarketdataIndicator::body() const {
  // @@protoc_insertion_point(field_list:models.MarketdataIndicator.Body)
  return body_;
}

// -------------------------------------------------------------------

// TradeIndicator_Trade

// string Alias = 1;
inline void TradeIndicator_Trade::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeIndicator_Trade::alias() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Alias)
  return alias_.GetNoArena();
}
inline void TradeIndicator_Trade::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Alias)
}
#if LANG_CXX11
inline void TradeIndicator_Trade::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.TradeIndicator.Trade.Alias)
}
#endif
inline void TradeIndicator_Trade::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.TradeIndicator.Trade.Alias)
}
inline void TradeIndicator_Trade::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.TradeIndicator.Trade.Alias)
}
inline ::std::string* TradeIndicator_Trade::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:models.TradeIndicator.Trade.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeIndicator_Trade::release_alias() {
  // @@protoc_insertion_point(field_release:models.TradeIndicator.Trade.Alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeIndicator_Trade::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:models.TradeIndicator.Trade.Alias)
}

// string Account = 2;
inline void TradeIndicator_Trade::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeIndicator_Trade::account() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Account)
  return account_.GetNoArena();
}
inline void TradeIndicator_Trade::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Account)
}
#if LANG_CXX11
inline void TradeIndicator_Trade::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.TradeIndicator.Trade.Account)
}
#endif
inline void TradeIndicator_Trade::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.TradeIndicator.Trade.Account)
}
inline void TradeIndicator_Trade::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.TradeIndicator.Trade.Account)
}
inline ::std::string* TradeIndicator_Trade::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:models.TradeIndicator.Trade.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeIndicator_Trade::release_account() {
  // @@protoc_insertion_point(field_release:models.TradeIndicator.Trade.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeIndicator_Trade::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:models.TradeIndicator.Trade.Account)
}

// string Exchange = 3;
inline void TradeIndicator_Trade::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeIndicator_Trade::exchange() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Exchange)
  return exchange_.GetNoArena();
}
inline void TradeIndicator_Trade::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Exchange)
}
#if LANG_CXX11
inline void TradeIndicator_Trade::set_exchange(::std::string&& value) {
  
  exchange_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.TradeIndicator.Trade.Exchange)
}
#endif
inline void TradeIndicator_Trade::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.TradeIndicator.Trade.Exchange)
}
inline void TradeIndicator_Trade::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.TradeIndicator.Trade.Exchange)
}
inline ::std::string* TradeIndicator_Trade::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:models.TradeIndicator.Trade.Exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeIndicator_Trade::release_exchange() {
  // @@protoc_insertion_point(field_release:models.TradeIndicator.Trade.Exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeIndicator_Trade::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:models.TradeIndicator.Trade.Exchange)
}

// string Client = 4;
inline void TradeIndicator_Trade::clear_client() {
  client_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeIndicator_Trade::client() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Client)
  return client_.GetNoArena();
}
inline void TradeIndicator_Trade::set_client(const ::std::string& value) {
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Client)
}
#if LANG_CXX11
inline void TradeIndicator_Trade::set_client(::std::string&& value) {
  
  client_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.TradeIndicator.Trade.Client)
}
#endif
inline void TradeIndicator_Trade::set_client(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.TradeIndicator.Trade.Client)
}
inline void TradeIndicator_Trade::set_client(const char* value, size_t size) {
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.TradeIndicator.Trade.Client)
}
inline ::std::string* TradeIndicator_Trade::mutable_client() {
  
  // @@protoc_insertion_point(field_mutable:models.TradeIndicator.Trade.Client)
  return client_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeIndicator_Trade::release_client() {
  // @@protoc_insertion_point(field_release:models.TradeIndicator.Trade.Client)
  
  return client_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeIndicator_Trade::set_allocated_client(::std::string* client) {
  if (client != NULL) {
    
  } else {
    
  }
  client_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client);
  // @@protoc_insertion_point(field_set_allocated:models.TradeIndicator.Trade.Client)
}

// int64 Tag = 5;
inline void TradeIndicator_Trade::clear_tag() {
  tag_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TradeIndicator_Trade::tag() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Tag)
  return tag_;
}
inline void TradeIndicator_Trade::set_tag(::google::protobuf::int64 value) {
  
  tag_ = value;
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Tag)
}

// string Symbol = 6;
inline void TradeIndicator_Trade::clear_symbol() {
  symbol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeIndicator_Trade::symbol() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Symbol)
  return symbol_.GetNoArena();
}
inline void TradeIndicator_Trade::set_symbol(const ::std::string& value) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Symbol)
}
#if LANG_CXX11
inline void TradeIndicator_Trade::set_symbol(::std::string&& value) {
  
  symbol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.TradeIndicator.Trade.Symbol)
}
#endif
inline void TradeIndicator_Trade::set_symbol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.TradeIndicator.Trade.Symbol)
}
inline void TradeIndicator_Trade::set_symbol(const char* value, size_t size) {
  
  symbol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.TradeIndicator.Trade.Symbol)
}
inline ::std::string* TradeIndicator_Trade::mutable_symbol() {
  
  // @@protoc_insertion_point(field_mutable:models.TradeIndicator.Trade.Symbol)
  return symbol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeIndicator_Trade::release_symbol() {
  // @@protoc_insertion_point(field_release:models.TradeIndicator.Trade.Symbol)
  
  return symbol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeIndicator_Trade::set_allocated_symbol(::std::string* symbol) {
  if (symbol != NULL) {
    
  } else {
    
  }
  symbol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol);
  // @@protoc_insertion_point(field_set_allocated:models.TradeIndicator.Trade.Symbol)
}

// .models.OrderSide Side = 7;
inline void TradeIndicator_Trade::clear_side() {
  side_ = 0;
}
inline ::models::OrderSide TradeIndicator_Trade::side() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Side)
  return static_cast< ::models::OrderSide >(side_);
}
inline void TradeIndicator_Trade::set_side(::models::OrderSide value) {
  
  side_ = value;
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Side)
}

// double Size = 8;
inline void TradeIndicator_Trade::clear_size() {
  size_ = 0;
}
inline double TradeIndicator_Trade::size() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Size)
  return size_;
}
inline void TradeIndicator_Trade::set_size(double value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Size)
}

// double Volume = 9;
inline void TradeIndicator_Trade::clear_volume() {
  volume_ = 0;
}
inline double TradeIndicator_Trade::volume() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Volume)
  return volume_;
}
inline void TradeIndicator_Trade::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Volume)
}

// double Price = 10;
inline void TradeIndicator_Trade::clear_price() {
  price_ = 0;
}
inline double TradeIndicator_Trade::price() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Price)
  return price_;
}
inline void TradeIndicator_Trade::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Price)
}

// string Id = 11;
inline void TradeIndicator_Trade::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeIndicator_Trade::id() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Id)
  return id_.GetNoArena();
}
inline void TradeIndicator_Trade::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Id)
}
#if LANG_CXX11
inline void TradeIndicator_Trade::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.TradeIndicator.Trade.Id)
}
#endif
inline void TradeIndicator_Trade::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.TradeIndicator.Trade.Id)
}
inline void TradeIndicator_Trade::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.TradeIndicator.Trade.Id)
}
inline ::std::string* TradeIndicator_Trade::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:models.TradeIndicator.Trade.Id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeIndicator_Trade::release_id() {
  // @@protoc_insertion_point(field_release:models.TradeIndicator.Trade.Id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeIndicator_Trade::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:models.TradeIndicator.Trade.Id)
}

// string LimitId = 12;
inline void TradeIndicator_Trade::clear_limitid() {
  limitid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TradeIndicator_Trade::limitid() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.LimitId)
  return limitid_.GetNoArena();
}
inline void TradeIndicator_Trade::set_limitid(const ::std::string& value) {
  
  limitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.LimitId)
}
#if LANG_CXX11
inline void TradeIndicator_Trade::set_limitid(::std::string&& value) {
  
  limitid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.TradeIndicator.Trade.LimitId)
}
#endif
inline void TradeIndicator_Trade::set_limitid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  limitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.TradeIndicator.Trade.LimitId)
}
inline void TradeIndicator_Trade::set_limitid(const char* value, size_t size) {
  
  limitid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.TradeIndicator.Trade.LimitId)
}
inline ::std::string* TradeIndicator_Trade::mutable_limitid() {
  
  // @@protoc_insertion_point(field_mutable:models.TradeIndicator.Trade.LimitId)
  return limitid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TradeIndicator_Trade::release_limitid() {
  // @@protoc_insertion_point(field_release:models.TradeIndicator.Trade.LimitId)
  
  return limitid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TradeIndicator_Trade::set_allocated_limitid(::std::string* limitid) {
  if (limitid != NULL) {
    
  } else {
    
  }
  limitid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), limitid);
  // @@protoc_insertion_point(field_set_allocated:models.TradeIndicator.Trade.LimitId)
}

// int64 Timestamp = 13;
inline void TradeIndicator_Trade::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 TradeIndicator_Trade::timestamp() const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Trade.Timestamp)
  return timestamp_;
}
inline void TradeIndicator_Trade::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:models.TradeIndicator.Trade.Timestamp)
}

// -------------------------------------------------------------------

// TradeIndicator

// .models.MessageHeader Header = 1;
inline bool TradeIndicator::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& TradeIndicator::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& TradeIndicator::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* TradeIndicator::release_header() {
  // @@protoc_insertion_point(field_release:models.TradeIndicator.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* TradeIndicator::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.TradeIndicator.Header)
  return header_;
}
inline void TradeIndicator::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.TradeIndicator.Header)
}

// repeated .models.TradeIndicator.Trade Body = 2;
inline int TradeIndicator::body_size() const {
  return body_.size();
}
inline void TradeIndicator::clear_body() {
  body_.Clear();
}
inline ::models::TradeIndicator_Trade* TradeIndicator::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:models.TradeIndicator.Body)
  return body_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::models::TradeIndicator_Trade >*
TradeIndicator::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:models.TradeIndicator.Body)
  return &body_;
}
inline const ::models::TradeIndicator_Trade& TradeIndicator::body(int index) const {
  // @@protoc_insertion_point(field_get:models.TradeIndicator.Body)
  return body_.Get(index);
}
inline ::models::TradeIndicator_Trade* TradeIndicator::add_body() {
  // @@protoc_insertion_point(field_add:models.TradeIndicator.Body)
  return body_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::models::TradeIndicator_Trade >&
TradeIndicator::body() const {
  // @@protoc_insertion_point(field_list:models.TradeIndicator.Body)
  return body_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BalancesIndicator_Balance

// string Alias = 1;
inline void BalancesIndicator_Balance::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BalancesIndicator_Balance::alias() const {
  // @@protoc_insertion_point(field_get:models.BalancesIndicator.Balance.Alias)
  return alias_.GetNoArena();
}
inline void BalancesIndicator_Balance::set_alias(const ::std::string& value) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.BalancesIndicator.Balance.Alias)
}
#if LANG_CXX11
inline void BalancesIndicator_Balance::set_alias(::std::string&& value) {
  
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.BalancesIndicator.Balance.Alias)
}
#endif
inline void BalancesIndicator_Balance::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.BalancesIndicator.Balance.Alias)
}
inline void BalancesIndicator_Balance::set_alias(const char* value, size_t size) {
  
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.BalancesIndicator.Balance.Alias)
}
inline ::std::string* BalancesIndicator_Balance::mutable_alias() {
  
  // @@protoc_insertion_point(field_mutable:models.BalancesIndicator.Balance.Alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BalancesIndicator_Balance::release_alias() {
  // @@protoc_insertion_point(field_release:models.BalancesIndicator.Balance.Alias)
  
  return alias_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BalancesIndicator_Balance::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    
  } else {
    
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:models.BalancesIndicator.Balance.Alias)
}

// string Account = 2;
inline void BalancesIndicator_Balance::clear_account() {
  account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BalancesIndicator_Balance::account() const {
  // @@protoc_insertion_point(field_get:models.BalancesIndicator.Balance.Account)
  return account_.GetNoArena();
}
inline void BalancesIndicator_Balance::set_account(const ::std::string& value) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.BalancesIndicator.Balance.Account)
}
#if LANG_CXX11
inline void BalancesIndicator_Balance::set_account(::std::string&& value) {
  
  account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.BalancesIndicator.Balance.Account)
}
#endif
inline void BalancesIndicator_Balance::set_account(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.BalancesIndicator.Balance.Account)
}
inline void BalancesIndicator_Balance::set_account(const char* value, size_t size) {
  
  account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.BalancesIndicator.Balance.Account)
}
inline ::std::string* BalancesIndicator_Balance::mutable_account() {
  
  // @@protoc_insertion_point(field_mutable:models.BalancesIndicator.Balance.Account)
  return account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BalancesIndicator_Balance::release_account() {
  // @@protoc_insertion_point(field_release:models.BalancesIndicator.Balance.Account)
  
  return account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BalancesIndicator_Balance::set_allocated_account(::std::string* account) {
  if (account != NULL) {
    
  } else {
    
  }
  account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), account);
  // @@protoc_insertion_point(field_set_allocated:models.BalancesIndicator.Balance.Account)
}

// string Exchange = 3;
inline void BalancesIndicator_Balance::clear_exchange() {
  exchange_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BalancesIndicator_Balance::exchange() const {
  // @@protoc_insertion_point(field_get:models.BalancesIndicator.Balance.Exchange)
  return exchange_.GetNoArena();
}
inline void BalancesIndicator_Balance::set_exchange(const ::std::string& value) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.BalancesIndicator.Balance.Exchange)
}
#if LANG_CXX11
inline void BalancesIndicator_Balance::set_exchange(::std::string&& value) {
  
  exchange_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.BalancesIndicator.Balance.Exchange)
}
#endif
inline void BalancesIndicator_Balance::set_exchange(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.BalancesIndicator.Balance.Exchange)
}
inline void BalancesIndicator_Balance::set_exchange(const char* value, size_t size) {
  
  exchange_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.BalancesIndicator.Balance.Exchange)
}
inline ::std::string* BalancesIndicator_Balance::mutable_exchange() {
  
  // @@protoc_insertion_point(field_mutable:models.BalancesIndicator.Balance.Exchange)
  return exchange_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BalancesIndicator_Balance::release_exchange() {
  // @@protoc_insertion_point(field_release:models.BalancesIndicator.Balance.Exchange)
  
  return exchange_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BalancesIndicator_Balance::set_allocated_exchange(::std::string* exchange) {
  if (exchange != NULL) {
    
  } else {
    
  }
  exchange_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), exchange);
  // @@protoc_insertion_point(field_set_allocated:models.BalancesIndicator.Balance.Exchange)
}

// map<string, double> Total = 4;
inline int BalancesIndicator_Balance::total_size() const {
  return total_.size();
}
inline void BalancesIndicator_Balance::clear_total() {
  total_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
BalancesIndicator_Balance::total() const {
  // @@protoc_insertion_point(field_map:models.BalancesIndicator.Balance.Total)
  return total_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
BalancesIndicator_Balance::mutable_total() {
  // @@protoc_insertion_point(field_mutable_map:models.BalancesIndicator.Balance.Total)
  return total_.MutableMap();
}

// map<string, double> Available = 5;
inline int BalancesIndicator_Balance::available_size() const {
  return available_.size();
}
inline void BalancesIndicator_Balance::clear_available() {
  available_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, double >&
BalancesIndicator_Balance::available() const {
  // @@protoc_insertion_point(field_map:models.BalancesIndicator.Balance.Available)
  return available_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, double >*
BalancesIndicator_Balance::mutable_available() {
  // @@protoc_insertion_point(field_mutable_map:models.BalancesIndicator.Balance.Available)
  return available_.MutableMap();
}

// -------------------------------------------------------------------

// BalancesIndicator

// .models.MessageHeader Header = 1;
inline bool BalancesIndicator::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& BalancesIndicator::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& BalancesIndicator::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.BalancesIndicator.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* BalancesIndicator::release_header() {
  // @@protoc_insertion_point(field_release:models.BalancesIndicator.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* BalancesIndicator::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.BalancesIndicator.Header)
  return header_;
}
inline void BalancesIndicator::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.BalancesIndicator.Header)
}

// repeated .models.BalancesIndicator.Balance Body = 2;
inline int BalancesIndicator::body_size() const {
  return body_.size();
}
inline void BalancesIndicator::clear_body() {
  body_.Clear();
}
inline ::models::BalancesIndicator_Balance* BalancesIndicator::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:models.BalancesIndicator.Body)
  return body_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::models::BalancesIndicator_Balance >*
BalancesIndicator::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:models.BalancesIndicator.Body)
  return &body_;
}
inline const ::models::BalancesIndicator_Balance& BalancesIndicator::body(int index) const {
  // @@protoc_insertion_point(field_get:models.BalancesIndicator.Body)
  return body_.Get(index);
}
inline ::models::BalancesIndicator_Balance* BalancesIndicator::add_body() {
  // @@protoc_insertion_point(field_add:models.BalancesIndicator.Body)
  return body_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::models::BalancesIndicator_Balance >&
BalancesIndicator::body() const {
  // @@protoc_insertion_point(field_list:models.BalancesIndicator.Body)
  return body_;
}

// -------------------------------------------------------------------

// OpenOrdersIndicator

// .models.MessageHeader Header = 1;
inline bool OpenOrdersIndicator::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& OpenOrdersIndicator::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& OpenOrdersIndicator::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.OpenOrdersIndicator.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* OpenOrdersIndicator::release_header() {
  // @@protoc_insertion_point(field_release:models.OpenOrdersIndicator.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* OpenOrdersIndicator::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.OpenOrdersIndicator.Header)
  return header_;
}
inline void OpenOrdersIndicator::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.OpenOrdersIndicator.Header)
}

// repeated .models.Order Body = 2;
inline int OpenOrdersIndicator::body_size() const {
  return body_.size();
}
inline ::models::Order* OpenOrdersIndicator::mutable_body(int index) {
  // @@protoc_insertion_point(field_mutable:models.OpenOrdersIndicator.Body)
  return body_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::models::Order >*
OpenOrdersIndicator::mutable_body() {
  // @@protoc_insertion_point(field_mutable_list:models.OpenOrdersIndicator.Body)
  return &body_;
}
inline const ::models::Order& OpenOrdersIndicator::body(int index) const {
  // @@protoc_insertion_point(field_get:models.OpenOrdersIndicator.Body)
  return body_.Get(index);
}
inline ::models::Order* OpenOrdersIndicator::add_body() {
  // @@protoc_insertion_point(field_add:models.OpenOrdersIndicator.Body)
  return body_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::models::Order >&
OpenOrdersIndicator::body() const {
  // @@protoc_insertion_point(field_list:models.OpenOrdersIndicator.Body)
  return body_;
}

// -------------------------------------------------------------------

// PlacedOrderIndicator

// .models.MessageHeader Header = 1;
inline bool PlacedOrderIndicator::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& PlacedOrderIndicator::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& PlacedOrderIndicator::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.PlacedOrderIndicator.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* PlacedOrderIndicator::release_header() {
  // @@protoc_insertion_point(field_release:models.PlacedOrderIndicator.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* PlacedOrderIndicator::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PlacedOrderIndicator.Header)
  return header_;
}
inline void PlacedOrderIndicator::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.PlacedOrderIndicator.Header)
}

// .models.Order Body = 2;
inline bool PlacedOrderIndicator::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline const ::models::Order& PlacedOrderIndicator::_internal_body() const {
  return *body_;
}
inline const ::models::Order& PlacedOrderIndicator::body() const {
  const ::models::Order* p = body_;
  // @@protoc_insertion_point(field_get:models.PlacedOrderIndicator.Body)
  return p != NULL ? *p : *reinterpret_cast<const ::models::Order*>(
      &::models::_Order_default_instance_);
}
inline ::models::Order* PlacedOrderIndicator::release_body() {
  // @@protoc_insertion_point(field_release:models.PlacedOrderIndicator.Body)
  
  ::models::Order* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::models::Order* PlacedOrderIndicator::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::models::Order>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.PlacedOrderIndicator.Body)
  return body_;
}
inline void PlacedOrderIndicator::set_allocated_body(::models::Order* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(body_);
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:models.PlacedOrderIndicator.Body)
}

// -------------------------------------------------------------------

// CanceledOrderIndicator

// .models.MessageHeader Header = 1;
inline bool CanceledOrderIndicator::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline const ::models::MessageHeader& CanceledOrderIndicator::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& CanceledOrderIndicator::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.CanceledOrderIndicator.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* CanceledOrderIndicator::release_header() {
  // @@protoc_insertion_point(field_release:models.CanceledOrderIndicator.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* CanceledOrderIndicator::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.CanceledOrderIndicator.Header)
  return header_;
}
inline void CanceledOrderIndicator::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.CanceledOrderIndicator.Header)
}

// .models.Order Body = 2;
inline bool CanceledOrderIndicator::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline const ::models::Order& CanceledOrderIndicator::_internal_body() const {
  return *body_;
}
inline const ::models::Order& CanceledOrderIndicator::body() const {
  const ::models::Order* p = body_;
  // @@protoc_insertion_point(field_get:models.CanceledOrderIndicator.Body)
  return p != NULL ? *p : *reinterpret_cast<const ::models::Order*>(
      &::models::_Order_default_instance_);
}
inline ::models::Order* CanceledOrderIndicator::release_body() {
  // @@protoc_insertion_point(field_release:models.CanceledOrderIndicator.Body)
  
  ::models::Order* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::models::Order* CanceledOrderIndicator::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::models::Order>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.CanceledOrderIndicator.Body)
  return body_;
}
inline void CanceledOrderIndicator::set_allocated_body(::models::Order* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(body_);
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:models.CanceledOrderIndicator.Body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace models

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_messages_5findicators_2eproto
