// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages_generic.proto

#ifndef PROTOBUF_INCLUDED_messages_5fgeneric_2eproto
#define PROTOBUF_INCLUDED_messages_5fgeneric_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_messages_5fgeneric_2eproto 

namespace protobuf_messages_5fgeneric_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_messages_5fgeneric_2eproto
namespace models {
class ErrorMessage;
class ErrorMessageDefaultTypeInternal;
extern ErrorMessageDefaultTypeInternal _ErrorMessage_default_instance_;
class ErrorMessage_MessageBody;
class ErrorMessage_MessageBodyDefaultTypeInternal;
extern ErrorMessage_MessageBodyDefaultTypeInternal _ErrorMessage_MessageBody_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class MessageHeader;
class MessageHeaderDefaultTypeInternal;
extern MessageHeaderDefaultTypeInternal _MessageHeader_default_instance_;
}  // namespace models
namespace google {
namespace protobuf {
template<> ::models::ErrorMessage* Arena::CreateMaybeMessage<::models::ErrorMessage>(Arena*);
template<> ::models::ErrorMessage_MessageBody* Arena::CreateMaybeMessage<::models::ErrorMessage_MessageBody>(Arena*);
template<> ::models::Message* Arena::CreateMaybeMessage<::models::Message>(Arena*);
template<> ::models::MessageHeader* Arena::CreateMaybeMessage<::models::MessageHeader>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace models {

enum MessageType {
  ACK_NO_BODY = 0,
  ERROR = 1,
  BOOK_SNAPSHOT = 200,
  BOOK_UPDATE = 201,
  MD_TRADES_UPDATE = 202,
  LOGIN = 499,
  LOGIN_RESP = 500,
  PUSH_ORDER = 501,
  PUSH_CANCEL = 502,
  PUSH_CANCEL_ALL = 503,
  PULL_ORDER = 550,
  PULL_ORDER_RESP = 551,
  PULL_ORDERS = 552,
  PULL_ORDERS_RESP = 553,
  PULL_BALANCES = 554,
  PULL_BALANCES_RESP = 555,
  PULL_MARKETS = 556,
  PULL_MARKETS_RESP = 557,
  MARKETDATA_IND = 600,
  TRADE_IND = 601,
  BALANCE_IND = 602,
  OPEN_ORDERS_IND = 603,
  PLACED_ORDER_IND = 604,
  CANCELED_ORDER_IND = 605,
  ORDER_DEMAND = 800,
  ORDER_PERMIT = 801,
  ROBOT_SWITCH_STATE = 802,
  CONFIG_REQUEST = 900,
  CONFIG_RESPONSE = 901,
  MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MessageType_IsValid(int value);
const MessageType MessageType_MIN = ACK_NO_BODY;
const MessageType MessageType_MAX = CONFIG_RESPONSE;
const int MessageType_ARRAYSIZE = MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MessageType_descriptor();
inline const ::std::string& MessageType_Name(MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MessageType_descriptor(), value);
}
inline bool MessageType_Parse(
    const ::std::string& name, MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageType>(
    MessageType_descriptor(), name, value);
}
enum ErrorCode {
  UNKNOWN_ERROR = 0,
  INVALID_MESSAGE_HEADER = 2,
  INVALID_MESSAGE_BODY = 3,
  INSTRUMENT_NOT_FOUND = 4,
  EXCHANGE_NOT_FOUND = 5,
  EXCHANGE_TIMEOUT = 6,
  EXCHANGE_ERROR = 7,
  ORDER_ID_NOT_FOUND = 8,
  ORDER_MOVE_NONSENCE = 9,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ErrorCode_IsValid(int value);
const ErrorCode ErrorCode_MIN = UNKNOWN_ERROR;
const ErrorCode ErrorCode_MAX = ORDER_MOVE_NONSENCE;
const int ErrorCode_ARRAYSIZE = ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor();
inline const ::std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ErrorCode_descriptor(), value);
}
inline bool ErrorCode_Parse(
    const ::std::string& name, ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(
    ErrorCode_descriptor(), name, value);
}
// ===================================================================

class MessageHeader : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.MessageHeader) */ {
 public:
  MessageHeader();
  virtual ~MessageHeader();

  MessageHeader(const MessageHeader& from);

  inline MessageHeader& operator=(const MessageHeader& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MessageHeader(MessageHeader&& from) noexcept
    : MessageHeader() {
    *this = ::std::move(from);
  }

  inline MessageHeader& operator=(MessageHeader&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageHeader& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageHeader* internal_default_instance() {
    return reinterpret_cast<const MessageHeader*>(
               &_MessageHeader_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MessageHeader* other);
  friend void swap(MessageHeader& a, MessageHeader& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MessageHeader* New() const final {
    return CreateMaybeMessage<MessageHeader>(NULL);
  }

  MessageHeader* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MessageHeader>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MessageHeader& from);
  void MergeFrom(const MessageHeader& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageHeader* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string UUID = 1;
  void clear_uuid();
  static const int kUUIDFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string Client = 5;
  void clear_client();
  static const int kClientFieldNumber = 5;
  const ::std::string& client() const;
  void set_client(const ::std::string& value);
  #if LANG_CXX11
  void set_client(::std::string&& value);
  #endif
  void set_client(const char* value);
  void set_client(const char* value, size_t size);
  ::std::string* mutable_client();
  ::std::string* release_client();
  void set_allocated_client(::std::string* client);

  // int64 Timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // .models.MessageType Type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::models::MessageType type() const;
  void set_type(::models::MessageType value);

  // int32 Version = 4;
  void clear_version();
  static const int kVersionFieldNumber = 4;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:models.MessageHeader)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr client_;
  ::google::protobuf::int64 timestamp_;
  int type_;
  ::google::protobuf::int32 version_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5fgeneric_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Message : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Message* other);
  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(NULL);
  }

  Message* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // @@protoc_insertion_point(class_scope:models.Message)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::models::MessageHeader* header_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5fgeneric_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ErrorMessage_MessageBody : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.ErrorMessage.MessageBody) */ {
 public:
  ErrorMessage_MessageBody();
  virtual ~ErrorMessage_MessageBody();

  ErrorMessage_MessageBody(const ErrorMessage_MessageBody& from);

  inline ErrorMessage_MessageBody& operator=(const ErrorMessage_MessageBody& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorMessage_MessageBody(ErrorMessage_MessageBody&& from) noexcept
    : ErrorMessage_MessageBody() {
    *this = ::std::move(from);
  }

  inline ErrorMessage_MessageBody& operator=(ErrorMessage_MessageBody&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorMessage_MessageBody& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorMessage_MessageBody* internal_default_instance() {
    return reinterpret_cast<const ErrorMessage_MessageBody*>(
               &_ErrorMessage_MessageBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ErrorMessage_MessageBody* other);
  friend void swap(ErrorMessage_MessageBody& a, ErrorMessage_MessageBody& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorMessage_MessageBody* New() const final {
    return CreateMaybeMessage<ErrorMessage_MessageBody>(NULL);
  }

  ErrorMessage_MessageBody* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorMessage_MessageBody>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorMessage_MessageBody& from);
  void MergeFrom(const ErrorMessage_MessageBody& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorMessage_MessageBody* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Message = 4;
  void clear_message();
  static const int kMessageFieldNumber = 4;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .models.ErrorCode Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::models::ErrorCode code() const;
  void set_code(::models::ErrorCode value);

  // .models.MessageType RefMessageType = 3;
  void clear_refmessagetype();
  static const int kRefMessageTypeFieldNumber = 3;
  ::models::MessageType refmessagetype() const;
  void set_refmessagetype(::models::MessageType value);

  // @@protoc_insertion_point(class_scope:models.ErrorMessage.MessageBody)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  int refmessagetype_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5fgeneric_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ErrorMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:models.ErrorMessage) */ {
 public:
  ErrorMessage();
  virtual ~ErrorMessage();

  ErrorMessage(const ErrorMessage& from);

  inline ErrorMessage& operator=(const ErrorMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ErrorMessage(ErrorMessage&& from) noexcept
    : ErrorMessage() {
    *this = ::std::move(from);
  }

  inline ErrorMessage& operator=(ErrorMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ErrorMessage* internal_default_instance() {
    return reinterpret_cast<const ErrorMessage*>(
               &_ErrorMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ErrorMessage* other);
  friend void swap(ErrorMessage& a, ErrorMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ErrorMessage* New() const final {
    return CreateMaybeMessage<ErrorMessage>(NULL);
  }

  ErrorMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ErrorMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ErrorMessage& from);
  void MergeFrom(const ErrorMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ErrorMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ErrorMessage_MessageBody MessageBody;

  // accessors -------------------------------------------------------

  // .models.MessageHeader Header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  private:
  const ::models::MessageHeader& _internal_header() const;
  public:
  const ::models::MessageHeader& header() const;
  ::models::MessageHeader* release_header();
  ::models::MessageHeader* mutable_header();
  void set_allocated_header(::models::MessageHeader* header);

  // .models.ErrorMessage.MessageBody Body = 2;
  bool has_body() const;
  void clear_body();
  static const int kBodyFieldNumber = 2;
  private:
  const ::models::ErrorMessage_MessageBody& _internal_body() const;
  public:
  const ::models::ErrorMessage_MessageBody& body() const;
  ::models::ErrorMessage_MessageBody* release_body();
  ::models::ErrorMessage_MessageBody* mutable_body();
  void set_allocated_body(::models::ErrorMessage_MessageBody* body);

  // @@protoc_insertion_point(class_scope:models.ErrorMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::models::MessageHeader* header_;
  ::models::ErrorMessage_MessageBody* body_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_messages_5fgeneric_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageHeader

// string UUID = 1;
inline void MessageHeader::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageHeader::uuid() const {
  // @@protoc_insertion_point(field_get:models.MessageHeader.UUID)
  return uuid_.GetNoArena();
}
inline void MessageHeader::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.MessageHeader.UUID)
}
#if LANG_CXX11
inline void MessageHeader::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.MessageHeader.UUID)
}
#endif
inline void MessageHeader::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.MessageHeader.UUID)
}
inline void MessageHeader::set_uuid(const char* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.MessageHeader.UUID)
}
inline ::std::string* MessageHeader::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:models.MessageHeader.UUID)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageHeader::release_uuid() {
  // @@protoc_insertion_point(field_release:models.MessageHeader.UUID)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageHeader::set_allocated_uuid(::std::string* uuid) {
  if (uuid != NULL) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:models.MessageHeader.UUID)
}

// int64 Timestamp = 2;
inline void MessageHeader::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MessageHeader::timestamp() const {
  // @@protoc_insertion_point(field_get:models.MessageHeader.Timestamp)
  return timestamp_;
}
inline void MessageHeader::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:models.MessageHeader.Timestamp)
}

// .models.MessageType Type = 3;
inline void MessageHeader::clear_type() {
  type_ = 0;
}
inline ::models::MessageType MessageHeader::type() const {
  // @@protoc_insertion_point(field_get:models.MessageHeader.Type)
  return static_cast< ::models::MessageType >(type_);
}
inline void MessageHeader::set_type(::models::MessageType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:models.MessageHeader.Type)
}

// int32 Version = 4;
inline void MessageHeader::clear_version() {
  version_ = 0;
}
inline ::google::protobuf::int32 MessageHeader::version() const {
  // @@protoc_insertion_point(field_get:models.MessageHeader.Version)
  return version_;
}
inline void MessageHeader::set_version(::google::protobuf::int32 value) {
  
  version_ = value;
  // @@protoc_insertion_point(field_set:models.MessageHeader.Version)
}

// string Client = 5;
inline void MessageHeader::clear_client() {
  client_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MessageHeader::client() const {
  // @@protoc_insertion_point(field_get:models.MessageHeader.Client)
  return client_.GetNoArena();
}
inline void MessageHeader::set_client(const ::std::string& value) {
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.MessageHeader.Client)
}
#if LANG_CXX11
inline void MessageHeader::set_client(::std::string&& value) {
  
  client_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.MessageHeader.Client)
}
#endif
inline void MessageHeader::set_client(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.MessageHeader.Client)
}
inline void MessageHeader::set_client(const char* value, size_t size) {
  
  client_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.MessageHeader.Client)
}
inline ::std::string* MessageHeader::mutable_client() {
  
  // @@protoc_insertion_point(field_mutable:models.MessageHeader.Client)
  return client_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageHeader::release_client() {
  // @@protoc_insertion_point(field_release:models.MessageHeader.Client)
  
  return client_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageHeader::set_allocated_client(::std::string* client) {
  if (client != NULL) {
    
  } else {
    
  }
  client_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client);
  // @@protoc_insertion_point(field_set_allocated:models.MessageHeader.Client)
}

// -------------------------------------------------------------------

// Message

// .models.MessageHeader Header = 1;
inline bool Message::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void Message::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::models::MessageHeader& Message::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& Message::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.Message.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* Message::release_header() {
  // @@protoc_insertion_point(field_release:models.Message.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* Message::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.Message.Header)
  return header_;
}
inline void Message::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.Message.Header)
}

// -------------------------------------------------------------------

// ErrorMessage_MessageBody

// .models.ErrorCode Code = 1;
inline void ErrorMessage_MessageBody::clear_code() {
  code_ = 0;
}
inline ::models::ErrorCode ErrorMessage_MessageBody::code() const {
  // @@protoc_insertion_point(field_get:models.ErrorMessage.MessageBody.Code)
  return static_cast< ::models::ErrorCode >(code_);
}
inline void ErrorMessage_MessageBody::set_code(::models::ErrorCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:models.ErrorMessage.MessageBody.Code)
}

// .models.MessageType RefMessageType = 3;
inline void ErrorMessage_MessageBody::clear_refmessagetype() {
  refmessagetype_ = 0;
}
inline ::models::MessageType ErrorMessage_MessageBody::refmessagetype() const {
  // @@protoc_insertion_point(field_get:models.ErrorMessage.MessageBody.RefMessageType)
  return static_cast< ::models::MessageType >(refmessagetype_);
}
inline void ErrorMessage_MessageBody::set_refmessagetype(::models::MessageType value) {
  
  refmessagetype_ = value;
  // @@protoc_insertion_point(field_set:models.ErrorMessage.MessageBody.RefMessageType)
}

// string Message = 4;
inline void ErrorMessage_MessageBody::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ErrorMessage_MessageBody::message() const {
  // @@protoc_insertion_point(field_get:models.ErrorMessage.MessageBody.Message)
  return message_.GetNoArena();
}
inline void ErrorMessage_MessageBody::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:models.ErrorMessage.MessageBody.Message)
}
#if LANG_CXX11
inline void ErrorMessage_MessageBody::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:models.ErrorMessage.MessageBody.Message)
}
#endif
inline void ErrorMessage_MessageBody::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:models.ErrorMessage.MessageBody.Message)
}
inline void ErrorMessage_MessageBody::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:models.ErrorMessage.MessageBody.Message)
}
inline ::std::string* ErrorMessage_MessageBody::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:models.ErrorMessage.MessageBody.Message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ErrorMessage_MessageBody::release_message() {
  // @@protoc_insertion_point(field_release:models.ErrorMessage.MessageBody.Message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ErrorMessage_MessageBody::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:models.ErrorMessage.MessageBody.Message)
}

// -------------------------------------------------------------------

// ErrorMessage

// .models.MessageHeader Header = 1;
inline bool ErrorMessage::has_header() const {
  return this != internal_default_instance() && header_ != NULL;
}
inline void ErrorMessage::clear_header() {
  if (GetArenaNoVirtual() == NULL && header_ != NULL) {
    delete header_;
  }
  header_ = NULL;
}
inline const ::models::MessageHeader& ErrorMessage::_internal_header() const {
  return *header_;
}
inline const ::models::MessageHeader& ErrorMessage::header() const {
  const ::models::MessageHeader* p = header_;
  // @@protoc_insertion_point(field_get:models.ErrorMessage.Header)
  return p != NULL ? *p : *reinterpret_cast<const ::models::MessageHeader*>(
      &::models::_MessageHeader_default_instance_);
}
inline ::models::MessageHeader* ErrorMessage::release_header() {
  // @@protoc_insertion_point(field_release:models.ErrorMessage.Header)
  
  ::models::MessageHeader* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::models::MessageHeader* ErrorMessage::mutable_header() {
  
  if (header_ == NULL) {
    auto* p = CreateMaybeMessage<::models::MessageHeader>(GetArenaNoVirtual());
    header_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.ErrorMessage.Header)
  return header_;
}
inline void ErrorMessage::set_allocated_header(::models::MessageHeader* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete header_;
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:models.ErrorMessage.Header)
}

// .models.ErrorMessage.MessageBody Body = 2;
inline bool ErrorMessage::has_body() const {
  return this != internal_default_instance() && body_ != NULL;
}
inline void ErrorMessage::clear_body() {
  if (GetArenaNoVirtual() == NULL && body_ != NULL) {
    delete body_;
  }
  body_ = NULL;
}
inline const ::models::ErrorMessage_MessageBody& ErrorMessage::_internal_body() const {
  return *body_;
}
inline const ::models::ErrorMessage_MessageBody& ErrorMessage::body() const {
  const ::models::ErrorMessage_MessageBody* p = body_;
  // @@protoc_insertion_point(field_get:models.ErrorMessage.Body)
  return p != NULL ? *p : *reinterpret_cast<const ::models::ErrorMessage_MessageBody*>(
      &::models::_ErrorMessage_MessageBody_default_instance_);
}
inline ::models::ErrorMessage_MessageBody* ErrorMessage::release_body() {
  // @@protoc_insertion_point(field_release:models.ErrorMessage.Body)
  
  ::models::ErrorMessage_MessageBody* temp = body_;
  body_ = NULL;
  return temp;
}
inline ::models::ErrorMessage_MessageBody* ErrorMessage::mutable_body() {
  
  if (body_ == NULL) {
    auto* p = CreateMaybeMessage<::models::ErrorMessage_MessageBody>(GetArenaNoVirtual());
    body_ = p;
  }
  // @@protoc_insertion_point(field_mutable:models.ErrorMessage.Body)
  return body_;
}
inline void ErrorMessage::set_allocated_body(::models::ErrorMessage_MessageBody* body) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete body_;
  }
  if (body) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      body = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, body, submessage_arena);
    }
    
  } else {
    
  }
  body_ = body;
  // @@protoc_insertion_point(field_set_allocated:models.ErrorMessage.Body)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace models

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::models::MessageType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::models::MessageType>() {
  return ::models::MessageType_descriptor();
}
template <> struct is_proto_enum< ::models::ErrorCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::models::ErrorCode>() {
  return ::models::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_messages_5fgeneric_2eproto
